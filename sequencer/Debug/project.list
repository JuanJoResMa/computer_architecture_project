
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005524  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080056ac  080056ac  000066ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056e4  080056e4  00007078  2**0
                  CONTENTS
  4 .ARM          00000000  080056e4  080056e4  00007078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080056e4  080056e4  00007078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056e4  080056e4  000066e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080056e8  080056e8  000066e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  080056ec  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007078  2**0
                  CONTENTS
 10 .bss          00000148  20000078  20000078  00007078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c0  200001c0  00007078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f446  00000000  00000000  000070a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020a8  00000000  00000000  000164ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ce0  00000000  00000000  00018598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a1c  00000000  00000000  00019278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b42b  00000000  00000000  00019c94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fae4  00000000  00000000  000350bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a416f  00000000  00000000  00044ba3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e8d12  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003708  00000000  00000000  000e8d58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000050  00000000  00000000  000ec460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000078 	.word	0x20000078
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005694 	.word	0x08005694

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000007c 	.word	0x2000007c
 80001c4:	08005694 	.word	0x08005694

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr
 80009a4:	0000      	movs	r0, r0
	...

080009a8 <freq_to_ps>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static inline uint16_t freq_to_ps(uint16_t freq) {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	80fb      	strh	r3, [r7, #6]
	return 8e4 / freq;
 80009b2:	88fb      	ldrh	r3, [r7, #6]
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff fd59 	bl	800046c <__aeabi_i2d>
 80009ba:	4602      	mov	r2, r0
 80009bc:	460b      	mov	r3, r1
 80009be:	a108      	add	r1, pc, #32	@ (adr r1, 80009e0 <freq_to_ps+0x38>)
 80009c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80009c4:	f7ff fee6 	bl	8000794 <__aeabi_ddiv>
 80009c8:	4602      	mov	r2, r0
 80009ca:	460b      	mov	r3, r1
 80009cc:	4610      	mov	r0, r2
 80009ce:	4619      	mov	r1, r3
 80009d0:	f7ff ffc8 	bl	8000964 <__aeabi_d2uiz>
 80009d4:	4603      	mov	r3, r0
 80009d6:	b29b      	uxth	r3, r3
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	00000000 	.word	0x00000000
 80009e4:	40f38800 	.word	0x40f38800

080009e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ec:	f000 fbe8 	bl	80011c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009f0:	f000 f858 	bl	8000aa4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009f4:	f000 f9a4 	bl	8000d40 <MX_GPIO_Init>
  MX_DMA_Init();
 80009f8:	f000 f984 	bl	8000d04 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80009fc:	f000 f952 	bl	8000ca4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000a00:	f000 f8a4 	bl	8000b4c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /* Set pulse width to 50% */
  TIM1->CCR1 = 0;
 8000a04:	4b1f      	ldr	r3, [pc, #124]	@ (8000a84 <main+0x9c>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	481e      	ldr	r0, [pc, #120]	@ (8000a88 <main+0xa0>)
 8000a0e:	f002 fcd9 	bl	80033c4 <HAL_TIM_PWM_Start>

  HAL_UART_Receive_IT(&huart2, notes, sizeof(notes));
 8000a12:	221f      	movs	r2, #31
 8000a14:	491d      	ldr	r1, [pc, #116]	@ (8000a8c <main+0xa4>)
 8000a16:	481e      	ldr	r0, [pc, #120]	@ (8000a90 <main+0xa8>)
 8000a18:	f003 fcbc 	bl	8004394 <HAL_UART_Receive_IT>

  note_num = 0;
 8000a1c:	4b1d      	ldr	r3, [pc, #116]	@ (8000a94 <main+0xac>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	801a      	strh	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if (ticks >= period) {
 8000a22:	4b1d      	ldr	r3, [pc, #116]	@ (8000a98 <main+0xb0>)
 8000a24:	881b      	ldrh	r3, [r3, #0]
 8000a26:	461a      	mov	r2, r3
 8000a28:	4b1c      	ldr	r3, [pc, #112]	@ (8000a9c <main+0xb4>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d8f8      	bhi.n	8000a22 <main+0x3a>

		if (notes[note_num] == END)
 8000a30:	4b18      	ldr	r3, [pc, #96]	@ (8000a94 <main+0xac>)
 8000a32:	881b      	ldrh	r3, [r3, #0]
 8000a34:	461a      	mov	r2, r3
 8000a36:	4b15      	ldr	r3, [pc, #84]	@ (8000a8c <main+0xa4>)
 8000a38:	5c9b      	ldrb	r3, [r3, r2]
 8000a3a:	2b24      	cmp	r3, #36	@ 0x24
 8000a3c:	d102      	bne.n	8000a44 <main+0x5c>
			note_num = 0;
 8000a3e:	4b15      	ldr	r3, [pc, #84]	@ (8000a94 <main+0xac>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	801a      	strh	r2, [r3, #0]

		__HAL_TIM_SET_PRESCALER(&htim1, freq_to_ps(note_to_freq[notes[note_num]]));
 8000a44:	4b13      	ldr	r3, [pc, #76]	@ (8000a94 <main+0xac>)
 8000a46:	881b      	ldrh	r3, [r3, #0]
 8000a48:	461a      	mov	r2, r3
 8000a4a:	4b10      	ldr	r3, [pc, #64]	@ (8000a8c <main+0xa4>)
 8000a4c:	5c9b      	ldrb	r3, [r3, r2]
 8000a4e:	461a      	mov	r2, r3
 8000a50:	4b13      	ldr	r3, [pc, #76]	@ (8000aa0 <main+0xb8>)
 8000a52:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000a56:	4618      	mov	r0, r3
 8000a58:	f7ff ffa6 	bl	80009a8 <freq_to_ps>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	461a      	mov	r2, r3
 8000a60:	4b09      	ldr	r3, [pc, #36]	@ (8000a88 <main+0xa0>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	629a      	str	r2, [r3, #40]	@ 0x28
		__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000a66:	4b08      	ldr	r3, [pc, #32]	@ (8000a88 <main+0xa0>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	625a      	str	r2, [r3, #36]	@ 0x24

		note_num++;
 8000a6e:	4b09      	ldr	r3, [pc, #36]	@ (8000a94 <main+0xac>)
 8000a70:	881b      	ldrh	r3, [r3, #0]
 8000a72:	3301      	adds	r3, #1
 8000a74:	b29a      	uxth	r2, r3
 8000a76:	4b07      	ldr	r3, [pc, #28]	@ (8000a94 <main+0xac>)
 8000a78:	801a      	strh	r2, [r3, #0]
		ticks = 0;
 8000a7a:	4b08      	ldr	r3, [pc, #32]	@ (8000a9c <main+0xb4>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
	if (ticks >= period) {
 8000a80:	e7cf      	b.n	8000a22 <main+0x3a>
 8000a82:	bf00      	nop
 8000a84:	40012c00 	.word	0x40012c00
 8000a88:	20000094 	.word	0x20000094
 8000a8c:	20000048 	.word	0x20000048
 8000a90:	20000124 	.word	0x20000124
 8000a94:	200001ac 	.word	0x200001ac
 8000a98:	20000068 	.word	0x20000068
 8000a9c:	200001b4 	.word	0x200001b4
 8000aa0:	20000000 	.word	0x20000000

08000aa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b096      	sub	sp, #88	@ 0x58
 8000aa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aaa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000aae:	2228      	movs	r2, #40	@ 0x28
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f004 fdc2 	bl	800563c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ab8:	f107 031c 	add.w	r3, r7, #28
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]
 8000ac6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ac8:	1d3b      	adds	r3, r7, #4
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	60da      	str	r2, [r3, #12]
 8000ad4:	611a      	str	r2, [r3, #16]
 8000ad6:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000adc:	2301      	movs	r3, #1
 8000ade:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ae0:	2310      	movs	r3, #16
 8000ae2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000aec:	4618      	mov	r0, r3
 8000aee:	f001 f82d 	bl	8001b4c <HAL_RCC_OscConfig>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000af8:	f000 f99a 	bl	8000e30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000afc:	230f      	movs	r3, #15
 8000afe:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b00:	2300      	movs	r3, #0
 8000b02:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b04:	2300      	movs	r3, #0
 8000b06:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b08:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b12:	f107 031c 	add.w	r3, r7, #28
 8000b16:	2100      	movs	r1, #0
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f002 f855 	bl	8002bc8 <HAL_RCC_ClockConfig>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000b24:	f000 f984 	bl	8000e30 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000b28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b2c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b32:	1d3b      	adds	r3, r7, #4
 8000b34:	4618      	mov	r0, r3
 8000b36:	f002 fa67 	bl	8003008 <HAL_RCCEx_PeriphCLKConfig>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000b40:	f000 f976 	bl	8000e30 <Error_Handler>
  }
}
 8000b44:	bf00      	nop
 8000b46:	3758      	adds	r7, #88	@ 0x58
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b09a      	sub	sp, #104	@ 0x68
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b52:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	609a      	str	r2, [r3, #8]
 8000b5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b60:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b6c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]
 8000b7c:	615a      	str	r2, [r3, #20]
 8000b7e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b80:	1d3b      	adds	r3, r7, #4
 8000b82:	222c      	movs	r2, #44	@ 0x2c
 8000b84:	2100      	movs	r1, #0
 8000b86:	4618      	mov	r0, r3
 8000b88:	f004 fd58 	bl	800563c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b8c:	4b43      	ldr	r3, [pc, #268]	@ (8000c9c <MX_TIM1_Init+0x150>)
 8000b8e:	4a44      	ldr	r2, [pc, #272]	@ (8000ca0 <MX_TIM1_Init+0x154>)
 8000b90:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 181-1;
 8000b92:	4b42      	ldr	r3, [pc, #264]	@ (8000c9c <MX_TIM1_Init+0x150>)
 8000b94:	22b4      	movs	r2, #180	@ 0xb4
 8000b96:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b98:	4b40      	ldr	r3, [pc, #256]	@ (8000c9c <MX_TIM1_Init+0x150>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000b9e:	4b3f      	ldr	r3, [pc, #252]	@ (8000c9c <MX_TIM1_Init+0x150>)
 8000ba0:	2263      	movs	r2, #99	@ 0x63
 8000ba2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ba4:	4b3d      	ldr	r3, [pc, #244]	@ (8000c9c <MX_TIM1_Init+0x150>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000baa:	4b3c      	ldr	r3, [pc, #240]	@ (8000c9c <MX_TIM1_Init+0x150>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bb0:	4b3a      	ldr	r3, [pc, #232]	@ (8000c9c <MX_TIM1_Init+0x150>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000bb6:	4839      	ldr	r0, [pc, #228]	@ (8000c9c <MX_TIM1_Init+0x150>)
 8000bb8:	f002 fb4c 	bl	8003254 <HAL_TIM_Base_Init>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000bc2:	f000 f935 	bl	8000e30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bca:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000bcc:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4832      	ldr	r0, [pc, #200]	@ (8000c9c <MX_TIM1_Init+0x150>)
 8000bd4:	f002 fdf6 	bl	80037c4 <HAL_TIM_ConfigClockSource>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000bde:	f000 f927 	bl	8000e30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000be2:	482e      	ldr	r0, [pc, #184]	@ (8000c9c <MX_TIM1_Init+0x150>)
 8000be4:	f002 fb8d 	bl	8003302 <HAL_TIM_PWM_Init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000bee:	f000 f91f 	bl	8000e30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bfe:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000c02:	4619      	mov	r1, r3
 8000c04:	4825      	ldr	r0, [pc, #148]	@ (8000c9c <MX_TIM1_Init+0x150>)
 8000c06:	f003 fa91 	bl	800412c <HAL_TIMEx_MasterConfigSynchronization>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000c10:	f000 f90e 	bl	8000e30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c14:	2360      	movs	r3, #96	@ 0x60
 8000c16:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 50;
 8000c18:	2332      	movs	r3, #50	@ 0x32
 8000c1a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c20:	2300      	movs	r3, #0
 8000c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c24:	2300      	movs	r3, #0
 8000c26:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c30:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c34:	2200      	movs	r2, #0
 8000c36:	4619      	mov	r1, r3
 8000c38:	4818      	ldr	r0, [pc, #96]	@ (8000c9c <MX_TIM1_Init+0x150>)
 8000c3a:	f002 fcaf 	bl	800359c <HAL_TIM_PWM_ConfigChannel>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000c44:	f000 f8f4 	bl	8000e30 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c50:	2300      	movs	r3, #0
 8000c52:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c54:	2300      	movs	r3, #0
 8000c56:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c5c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c60:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c66:	2300      	movs	r3, #0
 8000c68:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c6a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000c6e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c74:	2300      	movs	r3, #0
 8000c76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c78:	1d3b      	adds	r3, r7, #4
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4807      	ldr	r0, [pc, #28]	@ (8000c9c <MX_TIM1_Init+0x150>)
 8000c7e:	f003 fac3 	bl	8004208 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000c88:	f000 f8d2 	bl	8000e30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c8c:	4803      	ldr	r0, [pc, #12]	@ (8000c9c <MX_TIM1_Init+0x150>)
 8000c8e:	f000 f943 	bl	8000f18 <HAL_TIM_MspPostInit>

}
 8000c92:	bf00      	nop
 8000c94:	3768      	adds	r7, #104	@ 0x68
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20000094 	.word	0x20000094
 8000ca0:	40012c00 	.word	0x40012c00

08000ca4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ca8:	4b14      	ldr	r3, [pc, #80]	@ (8000cfc <MX_USART2_UART_Init+0x58>)
 8000caa:	4a15      	ldr	r2, [pc, #84]	@ (8000d00 <MX_USART2_UART_Init+0x5c>)
 8000cac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000cae:	4b13      	ldr	r3, [pc, #76]	@ (8000cfc <MX_USART2_UART_Init+0x58>)
 8000cb0:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000cb4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cb6:	4b11      	ldr	r3, [pc, #68]	@ (8000cfc <MX_USART2_UART_Init+0x58>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cbc:	4b0f      	ldr	r3, [pc, #60]	@ (8000cfc <MX_USART2_UART_Init+0x58>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000cfc <MX_USART2_UART_Init+0x58>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000cfc <MX_USART2_UART_Init+0x58>)
 8000cca:	220c      	movs	r2, #12
 8000ccc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cce:	4b0b      	ldr	r3, [pc, #44]	@ (8000cfc <MX_USART2_UART_Init+0x58>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cd4:	4b09      	ldr	r3, [pc, #36]	@ (8000cfc <MX_USART2_UART_Init+0x58>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cda:	4b08      	ldr	r3, [pc, #32]	@ (8000cfc <MX_USART2_UART_Init+0x58>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <MX_USART2_UART_Init+0x58>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ce6:	4805      	ldr	r0, [pc, #20]	@ (8000cfc <MX_USART2_UART_Init+0x58>)
 8000ce8:	f003 fb06 	bl	80042f8 <HAL_UART_Init>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000cf2:	f000 f89d 	bl	8000e30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	20000124 	.word	0x20000124
 8000d00:	40004400 	.word	0x40004400

08000d04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <MX_DMA_Init+0x38>)
 8000d0c:	695b      	ldr	r3, [r3, #20]
 8000d0e:	4a0b      	ldr	r2, [pc, #44]	@ (8000d3c <MX_DMA_Init+0x38>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	6153      	str	r3, [r2, #20]
 8000d16:	4b09      	ldr	r3, [pc, #36]	@ (8000d3c <MX_DMA_Init+0x38>)
 8000d18:	695b      	ldr	r3, [r3, #20]
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000d22:	2200      	movs	r2, #0
 8000d24:	2100      	movs	r1, #0
 8000d26:	200c      	movs	r0, #12
 8000d28:	f000 fb8b 	bl	8001442 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000d2c:	200c      	movs	r0, #12
 8000d2e:	f000 fba4 	bl	800147a <HAL_NVIC_EnableIRQ>

}
 8000d32:	bf00      	nop
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40021000 	.word	0x40021000

08000d40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b088      	sub	sp, #32
 8000d44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d46:	f107 030c 	add.w	r3, r7, #12
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	605a      	str	r2, [r3, #4]
 8000d50:	609a      	str	r2, [r3, #8]
 8000d52:	60da      	str	r2, [r3, #12]
 8000d54:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d56:	4b28      	ldr	r3, [pc, #160]	@ (8000df8 <MX_GPIO_Init+0xb8>)
 8000d58:	695b      	ldr	r3, [r3, #20]
 8000d5a:	4a27      	ldr	r2, [pc, #156]	@ (8000df8 <MX_GPIO_Init+0xb8>)
 8000d5c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d60:	6153      	str	r3, [r2, #20]
 8000d62:	4b25      	ldr	r3, [pc, #148]	@ (8000df8 <MX_GPIO_Init+0xb8>)
 8000d64:	695b      	ldr	r3, [r3, #20]
 8000d66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000d6a:	60bb      	str	r3, [r7, #8]
 8000d6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6e:	4b22      	ldr	r3, [pc, #136]	@ (8000df8 <MX_GPIO_Init+0xb8>)
 8000d70:	695b      	ldr	r3, [r3, #20]
 8000d72:	4a21      	ldr	r2, [pc, #132]	@ (8000df8 <MX_GPIO_Init+0xb8>)
 8000d74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d78:	6153      	str	r3, [r2, #20]
 8000d7a:	4b1f      	ldr	r3, [pc, #124]	@ (8000df8 <MX_GPIO_Init+0xb8>)
 8000d7c:	695b      	ldr	r3, [r3, #20]
 8000d7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d82:	607b      	str	r3, [r7, #4]
 8000d84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d86:	4b1c      	ldr	r3, [pc, #112]	@ (8000df8 <MX_GPIO_Init+0xb8>)
 8000d88:	695b      	ldr	r3, [r3, #20]
 8000d8a:	4a1b      	ldr	r2, [pc, #108]	@ (8000df8 <MX_GPIO_Init+0xb8>)
 8000d8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d90:	6153      	str	r3, [r2, #20]
 8000d92:	4b19      	ldr	r3, [pc, #100]	@ (8000df8 <MX_GPIO_Init+0xb8>)
 8000d94:	695b      	ldr	r3, [r3, #20]
 8000d96:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d9a:	603b      	str	r3, [r7, #0]
 8000d9c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2108      	movs	r1, #8
 8000da2:	4816      	ldr	r0, [pc, #88]	@ (8000dfc <MX_GPIO_Init+0xbc>)
 8000da4:	f000 fe7c 	bl	8001aa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : INTERRUPTOR_Pin */
  GPIO_InitStruct.Pin = INTERRUPTOR_Pin;
 8000da8:	2302      	movs	r3, #2
 8000daa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000dac:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000db0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000db2:	2301      	movs	r3, #1
 8000db4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(INTERRUPTOR_GPIO_Port, &GPIO_InitStruct);
 8000db6:	f107 030c 	add.w	r3, r7, #12
 8000dba:	4619      	mov	r1, r3
 8000dbc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dc0:	f000 fcfc 	bl	80017bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000dc4:	2308      	movs	r3, #8
 8000dc6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd4:	f107 030c 	add.w	r3, r7, #12
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4808      	ldr	r0, [pc, #32]	@ (8000dfc <MX_GPIO_Init+0xbc>)
 8000ddc:	f000 fcee 	bl	80017bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000de0:	2200      	movs	r2, #0
 8000de2:	2100      	movs	r1, #0
 8000de4:	2007      	movs	r0, #7
 8000de6:	f000 fb2c 	bl	8001442 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000dea:	2007      	movs	r0, #7
 8000dec:	f000 fb45 	bl	800147a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000df0:	bf00      	nop
 8000df2:	3720      	adds	r7, #32
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40021000 	.word	0x40021000
 8000dfc:	48000400 	.word	0x48000400

08000e00 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) // Ensure the callback is for USART2
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a05      	ldr	r2, [pc, #20]	@ (8000e24 <HAL_UART_RxCpltCallback+0x24>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d104      	bne.n	8000e1c <HAL_UART_RxCpltCallback+0x1c>
	{
	    // Re-enable UART receive interrupt
	    HAL_UART_Receive_IT(&huart2, notes, sizeof(notes));
 8000e12:	221f      	movs	r2, #31
 8000e14:	4904      	ldr	r1, [pc, #16]	@ (8000e28 <HAL_UART_RxCpltCallback+0x28>)
 8000e16:	4805      	ldr	r0, [pc, #20]	@ (8000e2c <HAL_UART_RxCpltCallback+0x2c>)
 8000e18:	f003 fabc 	bl	8004394 <HAL_UART_Receive_IT>
	}
}
 8000e1c:	bf00      	nop
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40004400 	.word	0x40004400
 8000e28:	20000048 	.word	0x20000048
 8000e2c:	20000124 	.word	0x20000124

08000e30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e34:	b672      	cpsid	i
}
 8000e36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e38:	bf00      	nop
 8000e3a:	e7fd      	b.n	8000e38 <Error_Handler+0x8>

08000e3c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e42:	4b0f      	ldr	r3, [pc, #60]	@ (8000e80 <HAL_MspInit+0x44>)
 8000e44:	699b      	ldr	r3, [r3, #24]
 8000e46:	4a0e      	ldr	r2, [pc, #56]	@ (8000e80 <HAL_MspInit+0x44>)
 8000e48:	f043 0301 	orr.w	r3, r3, #1
 8000e4c:	6193      	str	r3, [r2, #24]
 8000e4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e80 <HAL_MspInit+0x44>)
 8000e50:	699b      	ldr	r3, [r3, #24]
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	607b      	str	r3, [r7, #4]
 8000e58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e5a:	4b09      	ldr	r3, [pc, #36]	@ (8000e80 <HAL_MspInit+0x44>)
 8000e5c:	69db      	ldr	r3, [r3, #28]
 8000e5e:	4a08      	ldr	r2, [pc, #32]	@ (8000e80 <HAL_MspInit+0x44>)
 8000e60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e64:	61d3      	str	r3, [r2, #28]
 8000e66:	4b06      	ldr	r3, [pc, #24]	@ (8000e80 <HAL_MspInit+0x44>)
 8000e68:	69db      	ldr	r3, [r3, #28]
 8000e6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e6e:	603b      	str	r3, [r7, #0]
 8000e70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e72:	bf00      	nop
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	40021000 	.word	0x40021000

08000e84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a1d      	ldr	r2, [pc, #116]	@ (8000f08 <HAL_TIM_Base_MspInit+0x84>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d133      	bne.n	8000efe <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e96:	4b1d      	ldr	r3, [pc, #116]	@ (8000f0c <HAL_TIM_Base_MspInit+0x88>)
 8000e98:	699b      	ldr	r3, [r3, #24]
 8000e9a:	4a1c      	ldr	r2, [pc, #112]	@ (8000f0c <HAL_TIM_Base_MspInit+0x88>)
 8000e9c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000ea0:	6193      	str	r3, [r2, #24]
 8000ea2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f0c <HAL_TIM_Base_MspInit+0x88>)
 8000ea4:	699b      	ldr	r3, [r3, #24]
 8000ea6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8000eae:	4b18      	ldr	r3, [pc, #96]	@ (8000f10 <HAL_TIM_Base_MspInit+0x8c>)
 8000eb0:	4a18      	ldr	r2, [pc, #96]	@ (8000f14 <HAL_TIM_Base_MspInit+0x90>)
 8000eb2:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000eb4:	4b16      	ldr	r3, [pc, #88]	@ (8000f10 <HAL_TIM_Base_MspInit+0x8c>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eba:	4b15      	ldr	r3, [pc, #84]	@ (8000f10 <HAL_TIM_Base_MspInit+0x8c>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000ec0:	4b13      	ldr	r3, [pc, #76]	@ (8000f10 <HAL_TIM_Base_MspInit+0x8c>)
 8000ec2:	2280      	movs	r2, #128	@ 0x80
 8000ec4:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ec6:	4b12      	ldr	r3, [pc, #72]	@ (8000f10 <HAL_TIM_Base_MspInit+0x8c>)
 8000ec8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ecc:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ece:	4b10      	ldr	r3, [pc, #64]	@ (8000f10 <HAL_TIM_Base_MspInit+0x8c>)
 8000ed0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ed4:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	@ (8000f10 <HAL_TIM_Base_MspInit+0x8c>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000edc:	4b0c      	ldr	r3, [pc, #48]	@ (8000f10 <HAL_TIM_Base_MspInit+0x8c>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000ee2:	480b      	ldr	r0, [pc, #44]	@ (8000f10 <HAL_TIM_Base_MspInit+0x8c>)
 8000ee4:	f000 fae3 	bl	80014ae <HAL_DMA_Init>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8000eee:	f7ff ff9f 	bl	8000e30 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a06      	ldr	r2, [pc, #24]	@ (8000f10 <HAL_TIM_Base_MspInit+0x8c>)
 8000ef6:	625a      	str	r2, [r3, #36]	@ 0x24
 8000ef8:	4a05      	ldr	r2, [pc, #20]	@ (8000f10 <HAL_TIM_Base_MspInit+0x8c>)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000efe:	bf00      	nop
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40012c00 	.word	0x40012c00
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	200000e0 	.word	0x200000e0
 8000f14:	4002001c 	.word	0x4002001c

08000f18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b088      	sub	sp, #32
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f20:	f107 030c 	add.w	r3, r7, #12
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a12      	ldr	r2, [pc, #72]	@ (8000f80 <HAL_TIM_MspPostInit+0x68>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d11d      	bne.n	8000f76 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3a:	4b12      	ldr	r3, [pc, #72]	@ (8000f84 <HAL_TIM_MspPostInit+0x6c>)
 8000f3c:	695b      	ldr	r3, [r3, #20]
 8000f3e:	4a11      	ldr	r2, [pc, #68]	@ (8000f84 <HAL_TIM_MspPostInit+0x6c>)
 8000f40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f44:	6153      	str	r3, [r2, #20]
 8000f46:	4b0f      	ldr	r3, [pc, #60]	@ (8000f84 <HAL_TIM_MspPostInit+0x6c>)
 8000f48:	695b      	ldr	r3, [r3, #20]
 8000f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f4e:	60bb      	str	r3, [r7, #8]
 8000f50:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f52:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f56:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f60:	2300      	movs	r3, #0
 8000f62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000f64:	2306      	movs	r3, #6
 8000f66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f68:	f107 030c 	add.w	r3, r7, #12
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f72:	f000 fc23 	bl	80017bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000f76:	bf00      	nop
 8000f78:	3720      	adds	r7, #32
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40012c00 	.word	0x40012c00
 8000f84:	40021000 	.word	0x40021000

08000f88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08a      	sub	sp, #40	@ 0x28
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f90:	f107 0314 	add.w	r3, r7, #20
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a1c      	ldr	r2, [pc, #112]	@ (8001018 <HAL_UART_MspInit+0x90>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d131      	bne.n	800100e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000faa:	4b1c      	ldr	r3, [pc, #112]	@ (800101c <HAL_UART_MspInit+0x94>)
 8000fac:	69db      	ldr	r3, [r3, #28]
 8000fae:	4a1b      	ldr	r2, [pc, #108]	@ (800101c <HAL_UART_MspInit+0x94>)
 8000fb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fb4:	61d3      	str	r3, [r2, #28]
 8000fb6:	4b19      	ldr	r3, [pc, #100]	@ (800101c <HAL_UART_MspInit+0x94>)
 8000fb8:	69db      	ldr	r3, [r3, #28]
 8000fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fbe:	613b      	str	r3, [r7, #16]
 8000fc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc2:	4b16      	ldr	r3, [pc, #88]	@ (800101c <HAL_UART_MspInit+0x94>)
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	4a15      	ldr	r2, [pc, #84]	@ (800101c <HAL_UART_MspInit+0x94>)
 8000fc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fcc:	6153      	str	r3, [r2, #20]
 8000fce:	4b13      	ldr	r3, [pc, #76]	@ (800101c <HAL_UART_MspInit+0x94>)
 8000fd0:	695b      	ldr	r3, [r3, #20]
 8000fd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000fda:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000fde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fec:	2307      	movs	r3, #7
 8000fee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ffa:	f000 fbdf 	bl	80017bc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2100      	movs	r1, #0
 8001002:	2026      	movs	r0, #38	@ 0x26
 8001004:	f000 fa1d 	bl	8001442 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001008:	2026      	movs	r0, #38	@ 0x26
 800100a:	f000 fa36 	bl	800147a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800100e:	bf00      	nop
 8001010:	3728      	adds	r7, #40	@ 0x28
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40004400 	.word	0x40004400
 800101c:	40021000 	.word	0x40021000

08001020 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001024:	bf00      	nop
 8001026:	e7fd      	b.n	8001024 <NMI_Handler+0x4>

08001028 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800102c:	bf00      	nop
 800102e:	e7fd      	b.n	800102c <HardFault_Handler+0x4>

08001030 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001034:	bf00      	nop
 8001036:	e7fd      	b.n	8001034 <MemManage_Handler+0x4>

08001038 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800103c:	bf00      	nop
 800103e:	e7fd      	b.n	800103c <BusFault_Handler+0x4>

08001040 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001044:	bf00      	nop
 8001046:	e7fd      	b.n	8001044 <UsageFault_Handler+0x4>

08001048 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr

08001056 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
	...

08001074 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001078:	f000 f8e8 	bl	800124c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  deelay_counter++;
 800107c:	4b07      	ldr	r3, [pc, #28]	@ (800109c <SysTick_Handler+0x28>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	3301      	adds	r3, #1
 8001082:	4a06      	ldr	r2, [pc, #24]	@ (800109c <SysTick_Handler+0x28>)
 8001084:	6013      	str	r3, [r2, #0]

  if (play) {
 8001086:	4b06      	ldr	r3, [pc, #24]	@ (80010a0 <SysTick_Handler+0x2c>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d004      	beq.n	8001098 <SysTick_Handler+0x24>
	  ticks++;
 800108e:	4b05      	ldr	r3, [pc, #20]	@ (80010a4 <SysTick_Handler+0x30>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	3301      	adds	r3, #1
 8001094:	4a03      	ldr	r2, [pc, #12]	@ (80010a4 <SysTick_Handler+0x30>)
 8001096:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	200001b0 	.word	0x200001b0
 80010a0:	200001b8 	.word	0x200001b8
 80010a4:	200001b4 	.word	0x200001b4

080010a8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INTERRUPTOR_Pin);
 80010ac:	2002      	movs	r0, #2
 80010ae:	f000 fd29 	bl	8001b04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */
  if (deelay_counter > DEBOUNCE_DELAY) {
 80010b2:	4b14      	ldr	r3, [pc, #80]	@ (8001104 <EXTI1_IRQHandler+0x5c>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2bc8      	cmp	r3, #200	@ 0xc8
 80010b8:	d921      	bls.n	80010fe <EXTI1_IRQHandler+0x56>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 80010ba:	2108      	movs	r1, #8
 80010bc:	4812      	ldr	r0, [pc, #72]	@ (8001108 <EXTI1_IRQHandler+0x60>)
 80010be:	f000 fd07 	bl	8001ad0 <HAL_GPIO_TogglePin>
	  if (play) {
 80010c2:	4b12      	ldr	r3, [pc, #72]	@ (800110c <EXTI1_IRQHandler+0x64>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d00a      	beq.n	80010e0 <EXTI1_IRQHandler+0x38>
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80010ca:	4b11      	ldr	r3, [pc, #68]	@ (8001110 <EXTI1_IRQHandler+0x68>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2200      	movs	r2, #0
 80010d0:	635a      	str	r2, [r3, #52]	@ 0x34
		  play = 0;
 80010d2:	4b0e      	ldr	r3, [pc, #56]	@ (800110c <EXTI1_IRQHandler+0x64>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	701a      	strb	r2, [r3, #0]

		  note_num = 0;
 80010d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001114 <EXTI1_IRQHandler+0x6c>)
 80010da:	2200      	movs	r2, #0
 80010dc:	801a      	strh	r2, [r3, #0]
 80010de:	e00b      	b.n	80010f8 <EXTI1_IRQHandler+0x50>
	  } else {
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 50);
 80010e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001110 <EXTI1_IRQHandler+0x68>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2232      	movs	r2, #50	@ 0x32
 80010e6:	635a      	str	r2, [r3, #52]	@ 0x34
		  ticks = period;
 80010e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001118 <EXTI1_IRQHandler+0x70>)
 80010ea:	881b      	ldrh	r3, [r3, #0]
 80010ec:	461a      	mov	r2, r3
 80010ee:	4b0b      	ldr	r3, [pc, #44]	@ (800111c <EXTI1_IRQHandler+0x74>)
 80010f0:	601a      	str	r2, [r3, #0]
		  play = 1;
 80010f2:	4b06      	ldr	r3, [pc, #24]	@ (800110c <EXTI1_IRQHandler+0x64>)
 80010f4:	2201      	movs	r2, #1
 80010f6:	701a      	strb	r2, [r3, #0]
	  }
	  deelay_counter = 0U;
 80010f8:	4b02      	ldr	r3, [pc, #8]	@ (8001104 <EXTI1_IRQHandler+0x5c>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
  }
  /* USER CODE END EXTI1_IRQn 1 */
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	200001b0 	.word	0x200001b0
 8001108:	48000400 	.word	0x48000400
 800110c:	200001b8 	.word	0x200001b8
 8001110:	20000094 	.word	0x20000094
 8001114:	200001ac 	.word	0x200001ac
 8001118:	20000068 	.word	0x20000068
 800111c:	200001b4 	.word	0x200001b4

08001120 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001124:	4802      	ldr	r0, [pc, #8]	@ (8001130 <DMA1_Channel2_IRQHandler+0x10>)
 8001126:	f000 fa85 	bl	8001634 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	200000e0 	.word	0x200000e0

08001134 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001138:	4802      	ldr	r0, [pc, #8]	@ (8001144 <USART2_IRQHandler+0x10>)
 800113a:	f003 f96f 	bl	800441c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20000124 	.word	0x20000124

08001148 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800114c:	4b06      	ldr	r3, [pc, #24]	@ (8001168 <SystemInit+0x20>)
 800114e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001152:	4a05      	ldr	r2, [pc, #20]	@ (8001168 <SystemInit+0x20>)
 8001154:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001158:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800116c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011a4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001170:	f7ff ffea 	bl	8001148 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001174:	480c      	ldr	r0, [pc, #48]	@ (80011a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001176:	490d      	ldr	r1, [pc, #52]	@ (80011ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001178:	4a0d      	ldr	r2, [pc, #52]	@ (80011b0 <LoopForever+0xe>)
  movs r3, #0
 800117a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800117c:	e002      	b.n	8001184 <LoopCopyDataInit>

0800117e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800117e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001180:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001182:	3304      	adds	r3, #4

08001184 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001184:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001186:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001188:	d3f9      	bcc.n	800117e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800118a:	4a0a      	ldr	r2, [pc, #40]	@ (80011b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800118c:	4c0a      	ldr	r4, [pc, #40]	@ (80011b8 <LoopForever+0x16>)
  movs r3, #0
 800118e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001190:	e001      	b.n	8001196 <LoopFillZerobss>

08001192 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001192:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001194:	3204      	adds	r2, #4

08001196 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001196:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001198:	d3fb      	bcc.n	8001192 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800119a:	f004 fa57 	bl	800564c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800119e:	f7ff fc23 	bl	80009e8 <main>

080011a2 <LoopForever>:

LoopForever:
    b LoopForever
 80011a2:	e7fe      	b.n	80011a2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011a4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80011a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011ac:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80011b0:	080056ec 	.word	0x080056ec
  ldr r2, =_sbss
 80011b4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80011b8:	200001c0 	.word	0x200001c0

080011bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011bc:	e7fe      	b.n	80011bc <ADC1_2_IRQHandler>
	...

080011c0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011c4:	4b08      	ldr	r3, [pc, #32]	@ (80011e8 <HAL_Init+0x28>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a07      	ldr	r2, [pc, #28]	@ (80011e8 <HAL_Init+0x28>)
 80011ca:	f043 0310 	orr.w	r3, r3, #16
 80011ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d0:	2003      	movs	r0, #3
 80011d2:	f000 f92b 	bl	800142c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011d6:	2000      	movs	r0, #0
 80011d8:	f000 f808 	bl	80011ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011dc:	f7ff fe2e 	bl	8000e3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40022000 	.word	0x40022000

080011ec <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011f4:	4b12      	ldr	r3, [pc, #72]	@ (8001240 <HAL_InitTick+0x54>)
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	4b12      	ldr	r3, [pc, #72]	@ (8001244 <HAL_InitTick+0x58>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	4619      	mov	r1, r3
 80011fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001202:	fbb3 f3f1 	udiv	r3, r3, r1
 8001206:	fbb2 f3f3 	udiv	r3, r2, r3
 800120a:	4618      	mov	r0, r3
 800120c:	f000 f943 	bl	8001496 <HAL_SYSTICK_Config>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e00e      	b.n	8001238 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2b0f      	cmp	r3, #15
 800121e:	d80a      	bhi.n	8001236 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001220:	2200      	movs	r2, #0
 8001222:	6879      	ldr	r1, [r7, #4]
 8001224:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001228:	f000 f90b 	bl	8001442 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800122c:	4a06      	ldr	r2, [pc, #24]	@ (8001248 <HAL_InitTick+0x5c>)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001232:	2300      	movs	r3, #0
 8001234:	e000      	b.n	8001238 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
}
 8001238:	4618      	mov	r0, r3
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	2000006c 	.word	0x2000006c
 8001244:	20000074 	.word	0x20000074
 8001248:	20000070 	.word	0x20000070

0800124c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001250:	4b06      	ldr	r3, [pc, #24]	@ (800126c <HAL_IncTick+0x20>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	461a      	mov	r2, r3
 8001256:	4b06      	ldr	r3, [pc, #24]	@ (8001270 <HAL_IncTick+0x24>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4413      	add	r3, r2
 800125c:	4a04      	ldr	r2, [pc, #16]	@ (8001270 <HAL_IncTick+0x24>)
 800125e:	6013      	str	r3, [r2, #0]
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	20000074 	.word	0x20000074
 8001270:	200001bc 	.word	0x200001bc

08001274 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  return uwTick;  
 8001278:	4b03      	ldr	r3, [pc, #12]	@ (8001288 <HAL_GetTick+0x14>)
 800127a:	681b      	ldr	r3, [r3, #0]
}
 800127c:	4618      	mov	r0, r3
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	200001bc 	.word	0x200001bc

0800128c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800129c:	4b0c      	ldr	r3, [pc, #48]	@ (80012d0 <__NVIC_SetPriorityGrouping+0x44>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012a2:	68ba      	ldr	r2, [r7, #8]
 80012a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012a8:	4013      	ands	r3, r2
 80012aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012be:	4a04      	ldr	r2, [pc, #16]	@ (80012d0 <__NVIC_SetPriorityGrouping+0x44>)
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	60d3      	str	r3, [r2, #12]
}
 80012c4:	bf00      	nop
 80012c6:	3714      	adds	r7, #20
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d8:	4b04      	ldr	r3, [pc, #16]	@ (80012ec <__NVIC_GetPriorityGrouping+0x18>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	0a1b      	lsrs	r3, r3, #8
 80012de:	f003 0307 	and.w	r3, r3, #7
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	db0b      	blt.n	800131a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	f003 021f 	and.w	r2, r3, #31
 8001308:	4907      	ldr	r1, [pc, #28]	@ (8001328 <__NVIC_EnableIRQ+0x38>)
 800130a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130e:	095b      	lsrs	r3, r3, #5
 8001310:	2001      	movs	r0, #1
 8001312:	fa00 f202 	lsl.w	r2, r0, r2
 8001316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	e000e100 	.word	0xe000e100

0800132c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	6039      	str	r1, [r7, #0]
 8001336:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133c:	2b00      	cmp	r3, #0
 800133e:	db0a      	blt.n	8001356 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	b2da      	uxtb	r2, r3
 8001344:	490c      	ldr	r1, [pc, #48]	@ (8001378 <__NVIC_SetPriority+0x4c>)
 8001346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134a:	0112      	lsls	r2, r2, #4
 800134c:	b2d2      	uxtb	r2, r2
 800134e:	440b      	add	r3, r1
 8001350:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001354:	e00a      	b.n	800136c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	b2da      	uxtb	r2, r3
 800135a:	4908      	ldr	r1, [pc, #32]	@ (800137c <__NVIC_SetPriority+0x50>)
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	f003 030f 	and.w	r3, r3, #15
 8001362:	3b04      	subs	r3, #4
 8001364:	0112      	lsls	r2, r2, #4
 8001366:	b2d2      	uxtb	r2, r2
 8001368:	440b      	add	r3, r1
 800136a:	761a      	strb	r2, [r3, #24]
}
 800136c:	bf00      	nop
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	e000e100 	.word	0xe000e100
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001380:	b480      	push	{r7}
 8001382:	b089      	sub	sp, #36	@ 0x24
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	f003 0307 	and.w	r3, r3, #7
 8001392:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	f1c3 0307 	rsb	r3, r3, #7
 800139a:	2b04      	cmp	r3, #4
 800139c:	bf28      	it	cs
 800139e:	2304      	movcs	r3, #4
 80013a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	3304      	adds	r3, #4
 80013a6:	2b06      	cmp	r3, #6
 80013a8:	d902      	bls.n	80013b0 <NVIC_EncodePriority+0x30>
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	3b03      	subs	r3, #3
 80013ae:	e000      	b.n	80013b2 <NVIC_EncodePriority+0x32>
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	43da      	mvns	r2, r3
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	401a      	ands	r2, r3
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013c8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	fa01 f303 	lsl.w	r3, r1, r3
 80013d2:	43d9      	mvns	r1, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d8:	4313      	orrs	r3, r2
         );
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3724      	adds	r7, #36	@ 0x24
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
	...

080013e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3b01      	subs	r3, #1
 80013f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013f8:	d301      	bcc.n	80013fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013fa:	2301      	movs	r3, #1
 80013fc:	e00f      	b.n	800141e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001428 <SysTick_Config+0x40>)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3b01      	subs	r3, #1
 8001404:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001406:	210f      	movs	r1, #15
 8001408:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800140c:	f7ff ff8e 	bl	800132c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001410:	4b05      	ldr	r3, [pc, #20]	@ (8001428 <SysTick_Config+0x40>)
 8001412:	2200      	movs	r2, #0
 8001414:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001416:	4b04      	ldr	r3, [pc, #16]	@ (8001428 <SysTick_Config+0x40>)
 8001418:	2207      	movs	r2, #7
 800141a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	e000e010 	.word	0xe000e010

0800142c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7ff ff29 	bl	800128c <__NVIC_SetPriorityGrouping>
}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b086      	sub	sp, #24
 8001446:	af00      	add	r7, sp, #0
 8001448:	4603      	mov	r3, r0
 800144a:	60b9      	str	r1, [r7, #8]
 800144c:	607a      	str	r2, [r7, #4]
 800144e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001454:	f7ff ff3e 	bl	80012d4 <__NVIC_GetPriorityGrouping>
 8001458:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	68b9      	ldr	r1, [r7, #8]
 800145e:	6978      	ldr	r0, [r7, #20]
 8001460:	f7ff ff8e 	bl	8001380 <NVIC_EncodePriority>
 8001464:	4602      	mov	r2, r0
 8001466:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800146a:	4611      	mov	r1, r2
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff ff5d 	bl	800132c <__NVIC_SetPriority>
}
 8001472:	bf00      	nop
 8001474:	3718      	adds	r7, #24
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b082      	sub	sp, #8
 800147e:	af00      	add	r7, sp, #0
 8001480:	4603      	mov	r3, r0
 8001482:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff ff31 	bl	80012f0 <__NVIC_EnableIRQ>
}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b082      	sub	sp, #8
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f7ff ffa2 	bl	80013e8 <SysTick_Config>
 80014a4:	4603      	mov	r3, r0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b084      	sub	sp, #16
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d101      	bne.n	80014c4 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e037      	b.n	8001534 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2202      	movs	r2, #2
 80014c8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80014da:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80014de:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80014e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	695b      	ldr	r3, [r3, #20]
 80014fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001500:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	69db      	ldr	r3, [r3, #28]
 8001506:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001508:	68fa      	ldr	r2, [r7, #12]
 800150a:	4313      	orrs	r3, r2
 800150c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	68fa      	ldr	r2, [r7, #12]
 8001514:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f000 f930 	bl	800177c <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2201      	movs	r2, #1
 8001526:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2200      	movs	r2, #0
 800152e:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001532:	2300      	movs	r3, #0
}
 8001534:	4618      	mov	r0, r3
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d101      	bne.n	800154e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e02e      	b.n	80015ac <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001554:	2b02      	cmp	r3, #2
 8001556:	d008      	beq.n	800156a <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2204      	movs	r2, #4
 800155c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e020      	b.n	80015ac <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f022 020e 	bic.w	r2, r2, #14
 8001578:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f022 0201 	bic.w	r2, r2, #1
 8001588:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001592:	2101      	movs	r1, #1
 8001594:	fa01 f202 	lsl.w	r2, r1, r2
 8001598:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2201      	movs	r2, #1
 800159e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2200      	movs	r2, #0
 80015a6:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80015aa:	2300      	movs	r3, #0
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015c0:	2300      	movs	r3, #0
 80015c2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d005      	beq.n	80015da <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2204      	movs	r2, #4
 80015d2:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	73fb      	strb	r3, [r7, #15]
 80015d8:	e027      	b.n	800162a <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f022 020e 	bic.w	r2, r2, #14
 80015e8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f022 0201 	bic.w	r2, r2, #1
 80015f8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001602:	2101      	movs	r1, #1
 8001604:	fa01 f202 	lsl.w	r2, r1, r2
 8001608:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2201      	movs	r2, #1
 800160e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800161e:	2b00      	cmp	r3, #0
 8001620:	d003      	beq.n	800162a <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	4798      	blx	r3
    }
  }
  return status;
 800162a:	7bfb      	ldrb	r3, [r7, #15]
}
 800162c:	4618      	mov	r0, r3
 800162e:	3710      	adds	r7, #16
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001650:	2204      	movs	r2, #4
 8001652:	409a      	lsls	r2, r3
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	4013      	ands	r3, r2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d024      	beq.n	80016a6 <HAL_DMA_IRQHandler+0x72>
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	f003 0304 	and.w	r3, r3, #4
 8001662:	2b00      	cmp	r3, #0
 8001664:	d01f      	beq.n	80016a6 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0320 	and.w	r3, r3, #32
 8001670:	2b00      	cmp	r3, #0
 8001672:	d107      	bne.n	8001684 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f022 0204 	bic.w	r2, r2, #4
 8001682:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800168c:	2104      	movs	r1, #4
 800168e:	fa01 f202 	lsl.w	r2, r1, r2
 8001692:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001698:	2b00      	cmp	r3, #0
 800169a:	d06a      	beq.n	8001772 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80016a4:	e065      	b.n	8001772 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016aa:	2202      	movs	r2, #2
 80016ac:	409a      	lsls	r2, r3
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	4013      	ands	r3, r2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d02c      	beq.n	8001710 <HAL_DMA_IRQHandler+0xdc>
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	f003 0302 	and.w	r3, r3, #2
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d027      	beq.n	8001710 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0320 	and.w	r3, r3, #32
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d10b      	bne.n	80016e6 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f022 020a 	bic.w	r2, r2, #10
 80016dc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2201      	movs	r2, #1
 80016e2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016ee:	2102      	movs	r1, #2
 80016f0:	fa01 f202 	lsl.w	r2, r1, r2
 80016f4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001702:	2b00      	cmp	r3, #0
 8001704:	d035      	beq.n	8001772 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800170e:	e030      	b.n	8001772 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001714:	2208      	movs	r2, #8
 8001716:	409a      	lsls	r2, r3
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	4013      	ands	r3, r2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d028      	beq.n	8001772 <HAL_DMA_IRQHandler+0x13e>
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	f003 0308 	and.w	r3, r3, #8
 8001726:	2b00      	cmp	r3, #0
 8001728:	d023      	beq.n	8001772 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f022 020e 	bic.w	r2, r2, #14
 8001738:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001742:	2101      	movs	r1, #1
 8001744:	fa01 f202 	lsl.w	r2, r1, r2
 8001748:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2201      	movs	r2, #1
 800174e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2201      	movs	r2, #1
 8001754:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001764:	2b00      	cmp	r3, #0
 8001766:	d004      	beq.n	8001772 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	4798      	blx	r3
    }
  }
}
 8001770:	e7ff      	b.n	8001772 <HAL_DMA_IRQHandler+0x13e>
 8001772:	bf00      	nop
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
	...

0800177c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	461a      	mov	r2, r3
 800178a:	4b09      	ldr	r3, [pc, #36]	@ (80017b0 <DMA_CalcBaseAndBitshift+0x34>)
 800178c:	4413      	add	r3, r2
 800178e:	4a09      	ldr	r2, [pc, #36]	@ (80017b4 <DMA_CalcBaseAndBitshift+0x38>)
 8001790:	fba2 2303 	umull	r2, r3, r2, r3
 8001794:	091b      	lsrs	r3, r3, #4
 8001796:	009a      	lsls	r2, r3, #2
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4a06      	ldr	r2, [pc, #24]	@ (80017b8 <DMA_CalcBaseAndBitshift+0x3c>)
 80017a0:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	bffdfff8 	.word	0xbffdfff8
 80017b4:	cccccccd 	.word	0xcccccccd
 80017b8:	40020000 	.word	0x40020000

080017bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017bc:	b480      	push	{r7}
 80017be:	b087      	sub	sp, #28
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017c6:	2300      	movs	r3, #0
 80017c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ca:	e14e      	b.n	8001a6a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	2101      	movs	r1, #1
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	fa01 f303 	lsl.w	r3, r1, r3
 80017d8:	4013      	ands	r3, r2
 80017da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f000 8140 	beq.w	8001a64 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f003 0303 	and.w	r3, r3, #3
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d005      	beq.n	80017fc <HAL_GPIO_Init+0x40>
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f003 0303 	and.w	r3, r3, #3
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d130      	bne.n	800185e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	2203      	movs	r2, #3
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	43db      	mvns	r3, r3
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	4013      	ands	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	68da      	ldr	r2, [r3, #12]
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	4313      	orrs	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	693a      	ldr	r2, [r7, #16]
 800182a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001832:	2201      	movs	r2, #1
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43db      	mvns	r3, r3
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	4013      	ands	r3, r2
 8001840:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	091b      	lsrs	r3, r3, #4
 8001848:	f003 0201 	and.w	r2, r3, #1
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	4313      	orrs	r3, r2
 8001856:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f003 0303 	and.w	r3, r3, #3
 8001866:	2b03      	cmp	r3, #3
 8001868:	d017      	beq.n	800189a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	2203      	movs	r2, #3
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	43db      	mvns	r3, r3
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	4013      	ands	r3, r2
 8001880:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	689a      	ldr	r2, [r3, #8]
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	4313      	orrs	r3, r2
 8001892:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f003 0303 	and.w	r3, r3, #3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d123      	bne.n	80018ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	08da      	lsrs	r2, r3, #3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	3208      	adds	r2, #8
 80018ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	220f      	movs	r2, #15
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	43db      	mvns	r3, r3
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	4013      	ands	r3, r2
 80018c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	691a      	ldr	r2, [r3, #16]
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	f003 0307 	and.w	r3, r3, #7
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	4313      	orrs	r3, r2
 80018de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	08da      	lsrs	r2, r3, #3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3208      	adds	r2, #8
 80018e8:	6939      	ldr	r1, [r7, #16]
 80018ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	2203      	movs	r2, #3
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	43db      	mvns	r3, r3
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	4013      	ands	r3, r2
 8001904:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f003 0203 	and.w	r2, r3, #3
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	4313      	orrs	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800192a:	2b00      	cmp	r3, #0
 800192c:	f000 809a 	beq.w	8001a64 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001930:	4b55      	ldr	r3, [pc, #340]	@ (8001a88 <HAL_GPIO_Init+0x2cc>)
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	4a54      	ldr	r2, [pc, #336]	@ (8001a88 <HAL_GPIO_Init+0x2cc>)
 8001936:	f043 0301 	orr.w	r3, r3, #1
 800193a:	6193      	str	r3, [r2, #24]
 800193c:	4b52      	ldr	r3, [pc, #328]	@ (8001a88 <HAL_GPIO_Init+0x2cc>)
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	f003 0301 	and.w	r3, r3, #1
 8001944:	60bb      	str	r3, [r7, #8]
 8001946:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001948:	4a50      	ldr	r2, [pc, #320]	@ (8001a8c <HAL_GPIO_Init+0x2d0>)
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	089b      	lsrs	r3, r3, #2
 800194e:	3302      	adds	r3, #2
 8001950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001954:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	f003 0303 	and.w	r3, r3, #3
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	220f      	movs	r2, #15
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	43db      	mvns	r3, r3
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	4013      	ands	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001972:	d013      	beq.n	800199c <HAL_GPIO_Init+0x1e0>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a46      	ldr	r2, [pc, #280]	@ (8001a90 <HAL_GPIO_Init+0x2d4>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d00d      	beq.n	8001998 <HAL_GPIO_Init+0x1dc>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4a45      	ldr	r2, [pc, #276]	@ (8001a94 <HAL_GPIO_Init+0x2d8>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d007      	beq.n	8001994 <HAL_GPIO_Init+0x1d8>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a44      	ldr	r2, [pc, #272]	@ (8001a98 <HAL_GPIO_Init+0x2dc>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d101      	bne.n	8001990 <HAL_GPIO_Init+0x1d4>
 800198c:	2303      	movs	r3, #3
 800198e:	e006      	b.n	800199e <HAL_GPIO_Init+0x1e2>
 8001990:	2305      	movs	r3, #5
 8001992:	e004      	b.n	800199e <HAL_GPIO_Init+0x1e2>
 8001994:	2302      	movs	r3, #2
 8001996:	e002      	b.n	800199e <HAL_GPIO_Init+0x1e2>
 8001998:	2301      	movs	r3, #1
 800199a:	e000      	b.n	800199e <HAL_GPIO_Init+0x1e2>
 800199c:	2300      	movs	r3, #0
 800199e:	697a      	ldr	r2, [r7, #20]
 80019a0:	f002 0203 	and.w	r2, r2, #3
 80019a4:	0092      	lsls	r2, r2, #2
 80019a6:	4093      	lsls	r3, r2
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019ae:	4937      	ldr	r1, [pc, #220]	@ (8001a8c <HAL_GPIO_Init+0x2d0>)
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	089b      	lsrs	r3, r3, #2
 80019b4:	3302      	adds	r3, #2
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019bc:	4b37      	ldr	r3, [pc, #220]	@ (8001a9c <HAL_GPIO_Init+0x2e0>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	43db      	mvns	r3, r3
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	4013      	ands	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d003      	beq.n	80019e0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	4313      	orrs	r3, r2
 80019de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80019e0:	4a2e      	ldr	r2, [pc, #184]	@ (8001a9c <HAL_GPIO_Init+0x2e0>)
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019e6:	4b2d      	ldr	r3, [pc, #180]	@ (8001a9c <HAL_GPIO_Init+0x2e0>)
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	43db      	mvns	r3, r3
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	4013      	ands	r3, r2
 80019f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d003      	beq.n	8001a0a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a0a:	4a24      	ldr	r2, [pc, #144]	@ (8001a9c <HAL_GPIO_Init+0x2e0>)
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a10:	4b22      	ldr	r3, [pc, #136]	@ (8001a9c <HAL_GPIO_Init+0x2e0>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d003      	beq.n	8001a34 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a34:	4a19      	ldr	r2, [pc, #100]	@ (8001a9c <HAL_GPIO_Init+0x2e0>)
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a3a:	4b18      	ldr	r3, [pc, #96]	@ (8001a9c <HAL_GPIO_Init+0x2e0>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	43db      	mvns	r3, r3
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	4013      	ands	r3, r2
 8001a48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d003      	beq.n	8001a5e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a5e:	4a0f      	ldr	r2, [pc, #60]	@ (8001a9c <HAL_GPIO_Init+0x2e0>)
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	3301      	adds	r3, #1
 8001a68:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	fa22 f303 	lsr.w	r3, r2, r3
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	f47f aea9 	bne.w	80017cc <HAL_GPIO_Init+0x10>
  }
}
 8001a7a:	bf00      	nop
 8001a7c:	bf00      	nop
 8001a7e:	371c      	adds	r7, #28
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	40010000 	.word	0x40010000
 8001a90:	48000400 	.word	0x48000400
 8001a94:	48000800 	.word	0x48000800
 8001a98:	48000c00 	.word	0x48000c00
 8001a9c:	40010400 	.word	0x40010400

08001aa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	807b      	strh	r3, [r7, #2]
 8001aac:	4613      	mov	r3, r2
 8001aae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ab0:	787b      	ldrb	r3, [r7, #1]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d003      	beq.n	8001abe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ab6:	887a      	ldrh	r2, [r7, #2]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001abc:	e002      	b.n	8001ac4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001abe:	887a      	ldrh	r2, [r7, #2]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	460b      	mov	r3, r1
 8001ada:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	695b      	ldr	r3, [r3, #20]
 8001ae0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ae2:	887a      	ldrh	r2, [r7, #2]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	041a      	lsls	r2, r3, #16
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	43d9      	mvns	r1, r3
 8001aee:	887b      	ldrh	r3, [r7, #2]
 8001af0:	400b      	ands	r3, r1
 8001af2:	431a      	orrs	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	619a      	str	r2, [r3, #24]
}
 8001af8:	bf00      	nop
 8001afa:	3714      	adds	r7, #20
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b0e:	4b08      	ldr	r3, [pc, #32]	@ (8001b30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b10:	695a      	ldr	r2, [r3, #20]
 8001b12:	88fb      	ldrh	r3, [r7, #6]
 8001b14:	4013      	ands	r3, r2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d006      	beq.n	8001b28 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b1a:	4a05      	ldr	r2, [pc, #20]	@ (8001b30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b1c:	88fb      	ldrh	r3, [r7, #6]
 8001b1e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b20:	88fb      	ldrh	r3, [r7, #6]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f000 f806 	bl	8001b34 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b28:	bf00      	nop
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40010400 	.word	0x40010400

08001b34 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
	...

08001b4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b58:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b5c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b62:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d102      	bne.n	8001b72 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	f001 b823 	b.w	8002bb8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b76:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f000 817d 	beq.w	8001e82 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b88:	4bbc      	ldr	r3, [pc, #752]	@ (8001e7c <HAL_RCC_OscConfig+0x330>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f003 030c 	and.w	r3, r3, #12
 8001b90:	2b04      	cmp	r3, #4
 8001b92:	d00c      	beq.n	8001bae <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b94:	4bb9      	ldr	r3, [pc, #740]	@ (8001e7c <HAL_RCC_OscConfig+0x330>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f003 030c 	and.w	r3, r3, #12
 8001b9c:	2b08      	cmp	r3, #8
 8001b9e:	d15c      	bne.n	8001c5a <HAL_RCC_OscConfig+0x10e>
 8001ba0:	4bb6      	ldr	r3, [pc, #728]	@ (8001e7c <HAL_RCC_OscConfig+0x330>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ba8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bac:	d155      	bne.n	8001c5a <HAL_RCC_OscConfig+0x10e>
 8001bae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001bb2:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001bba:	fa93 f3a3 	rbit	r3, r3
 8001bbe:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001bc2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc6:	fab3 f383 	clz	r3, r3
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	095b      	lsrs	r3, r3, #5
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	f043 0301 	orr.w	r3, r3, #1
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d102      	bne.n	8001be0 <HAL_RCC_OscConfig+0x94>
 8001bda:	4ba8      	ldr	r3, [pc, #672]	@ (8001e7c <HAL_RCC_OscConfig+0x330>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	e015      	b.n	8001c0c <HAL_RCC_OscConfig+0xc0>
 8001be0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001be4:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001bec:	fa93 f3a3 	rbit	r3, r3
 8001bf0:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001bf4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001bf8:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001bfc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001c00:	fa93 f3a3 	rbit	r3, r3
 8001c04:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001c08:	4b9c      	ldr	r3, [pc, #624]	@ (8001e7c <HAL_RCC_OscConfig+0x330>)
 8001c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c0c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001c10:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001c14:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001c18:	fa92 f2a2 	rbit	r2, r2
 8001c1c:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001c20:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001c24:	fab2 f282 	clz	r2, r2
 8001c28:	b2d2      	uxtb	r2, r2
 8001c2a:	f042 0220 	orr.w	r2, r2, #32
 8001c2e:	b2d2      	uxtb	r2, r2
 8001c30:	f002 021f 	and.w	r2, r2, #31
 8001c34:	2101      	movs	r1, #1
 8001c36:	fa01 f202 	lsl.w	r2, r1, r2
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	f000 811f 	beq.w	8001e80 <HAL_RCC_OscConfig+0x334>
 8001c42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c46:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f040 8116 	bne.w	8001e80 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	f000 bfaf 	b.w	8002bb8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c5e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c6a:	d106      	bne.n	8001c7a <HAL_RCC_OscConfig+0x12e>
 8001c6c:	4b83      	ldr	r3, [pc, #524]	@ (8001e7c <HAL_RCC_OscConfig+0x330>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a82      	ldr	r2, [pc, #520]	@ (8001e7c <HAL_RCC_OscConfig+0x330>)
 8001c72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c76:	6013      	str	r3, [r2, #0]
 8001c78:	e036      	b.n	8001ce8 <HAL_RCC_OscConfig+0x19c>
 8001c7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c7e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d10c      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x158>
 8001c8a:	4b7c      	ldr	r3, [pc, #496]	@ (8001e7c <HAL_RCC_OscConfig+0x330>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a7b      	ldr	r2, [pc, #492]	@ (8001e7c <HAL_RCC_OscConfig+0x330>)
 8001c90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c94:	6013      	str	r3, [r2, #0]
 8001c96:	4b79      	ldr	r3, [pc, #484]	@ (8001e7c <HAL_RCC_OscConfig+0x330>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a78      	ldr	r2, [pc, #480]	@ (8001e7c <HAL_RCC_OscConfig+0x330>)
 8001c9c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ca0:	6013      	str	r3, [r2, #0]
 8001ca2:	e021      	b.n	8001ce8 <HAL_RCC_OscConfig+0x19c>
 8001ca4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ca8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001cb4:	d10c      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x184>
 8001cb6:	4b71      	ldr	r3, [pc, #452]	@ (8001e7c <HAL_RCC_OscConfig+0x330>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a70      	ldr	r2, [pc, #448]	@ (8001e7c <HAL_RCC_OscConfig+0x330>)
 8001cbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cc0:	6013      	str	r3, [r2, #0]
 8001cc2:	4b6e      	ldr	r3, [pc, #440]	@ (8001e7c <HAL_RCC_OscConfig+0x330>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a6d      	ldr	r2, [pc, #436]	@ (8001e7c <HAL_RCC_OscConfig+0x330>)
 8001cc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ccc:	6013      	str	r3, [r2, #0]
 8001cce:	e00b      	b.n	8001ce8 <HAL_RCC_OscConfig+0x19c>
 8001cd0:	4b6a      	ldr	r3, [pc, #424]	@ (8001e7c <HAL_RCC_OscConfig+0x330>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a69      	ldr	r2, [pc, #420]	@ (8001e7c <HAL_RCC_OscConfig+0x330>)
 8001cd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cda:	6013      	str	r3, [r2, #0]
 8001cdc:	4b67      	ldr	r3, [pc, #412]	@ (8001e7c <HAL_RCC_OscConfig+0x330>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a66      	ldr	r2, [pc, #408]	@ (8001e7c <HAL_RCC_OscConfig+0x330>)
 8001ce2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ce6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ce8:	4b64      	ldr	r3, [pc, #400]	@ (8001e7c <HAL_RCC_OscConfig+0x330>)
 8001cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cec:	f023 020f 	bic.w	r2, r3, #15
 8001cf0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cf4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	495f      	ldr	r1, [pc, #380]	@ (8001e7c <HAL_RCC_OscConfig+0x330>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d06:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d059      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d12:	f7ff faaf 	bl	8001274 <HAL_GetTick>
 8001d16:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d1a:	e00a      	b.n	8001d32 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d1c:	f7ff faaa 	bl	8001274 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b64      	cmp	r3, #100	@ 0x64
 8001d2a:	d902      	bls.n	8001d32 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	f000 bf43 	b.w	8002bb8 <HAL_RCC_OscConfig+0x106c>
 8001d32:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d36:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001d3e:	fa93 f3a3 	rbit	r3, r3
 8001d42:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001d46:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d4a:	fab3 f383 	clz	r3, r3
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	095b      	lsrs	r3, r3, #5
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d102      	bne.n	8001d64 <HAL_RCC_OscConfig+0x218>
 8001d5e:	4b47      	ldr	r3, [pc, #284]	@ (8001e7c <HAL_RCC_OscConfig+0x330>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	e015      	b.n	8001d90 <HAL_RCC_OscConfig+0x244>
 8001d64:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d68:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001d70:	fa93 f3a3 	rbit	r3, r3
 8001d74:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001d78:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d7c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001d80:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001d84:	fa93 f3a3 	rbit	r3, r3
 8001d88:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001d8c:	4b3b      	ldr	r3, [pc, #236]	@ (8001e7c <HAL_RCC_OscConfig+0x330>)
 8001d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d90:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001d94:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001d98:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001d9c:	fa92 f2a2 	rbit	r2, r2
 8001da0:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001da4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001da8:	fab2 f282 	clz	r2, r2
 8001dac:	b2d2      	uxtb	r2, r2
 8001dae:	f042 0220 	orr.w	r2, r2, #32
 8001db2:	b2d2      	uxtb	r2, r2
 8001db4:	f002 021f 	and.w	r2, r2, #31
 8001db8:	2101      	movs	r1, #1
 8001dba:	fa01 f202 	lsl.w	r2, r1, r2
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d0ab      	beq.n	8001d1c <HAL_RCC_OscConfig+0x1d0>
 8001dc4:	e05d      	b.n	8001e82 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc6:	f7ff fa55 	bl	8001274 <HAL_GetTick>
 8001dca:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dce:	e00a      	b.n	8001de6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dd0:	f7ff fa50 	bl	8001274 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	2b64      	cmp	r3, #100	@ 0x64
 8001dde:	d902      	bls.n	8001de6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	f000 bee9 	b.w	8002bb8 <HAL_RCC_OscConfig+0x106c>
 8001de6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001dea:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dee:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001df2:	fa93 f3a3 	rbit	r3, r3
 8001df6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001dfa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dfe:	fab3 f383 	clz	r3, r3
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	095b      	lsrs	r3, r3, #5
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	f043 0301 	orr.w	r3, r3, #1
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d102      	bne.n	8001e18 <HAL_RCC_OscConfig+0x2cc>
 8001e12:	4b1a      	ldr	r3, [pc, #104]	@ (8001e7c <HAL_RCC_OscConfig+0x330>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	e015      	b.n	8001e44 <HAL_RCC_OscConfig+0x2f8>
 8001e18:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e1c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e20:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001e24:	fa93 f3a3 	rbit	r3, r3
 8001e28:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001e2c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e30:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001e34:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001e38:	fa93 f3a3 	rbit	r3, r3
 8001e3c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001e40:	4b0e      	ldr	r3, [pc, #56]	@ (8001e7c <HAL_RCC_OscConfig+0x330>)
 8001e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e44:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001e48:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001e4c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001e50:	fa92 f2a2 	rbit	r2, r2
 8001e54:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001e58:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001e5c:	fab2 f282 	clz	r2, r2
 8001e60:	b2d2      	uxtb	r2, r2
 8001e62:	f042 0220 	orr.w	r2, r2, #32
 8001e66:	b2d2      	uxtb	r2, r2
 8001e68:	f002 021f 	and.w	r2, r2, #31
 8001e6c:	2101      	movs	r1, #1
 8001e6e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e72:	4013      	ands	r3, r2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d1ab      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x284>
 8001e78:	e003      	b.n	8001e82 <HAL_RCC_OscConfig+0x336>
 8001e7a:	bf00      	nop
 8001e7c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e86:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f000 817d 	beq.w	8002192 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001e98:	4ba6      	ldr	r3, [pc, #664]	@ (8002134 <HAL_RCC_OscConfig+0x5e8>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f003 030c 	and.w	r3, r3, #12
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d00b      	beq.n	8001ebc <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001ea4:	4ba3      	ldr	r3, [pc, #652]	@ (8002134 <HAL_RCC_OscConfig+0x5e8>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f003 030c 	and.w	r3, r3, #12
 8001eac:	2b08      	cmp	r3, #8
 8001eae:	d172      	bne.n	8001f96 <HAL_RCC_OscConfig+0x44a>
 8001eb0:	4ba0      	ldr	r3, [pc, #640]	@ (8002134 <HAL_RCC_OscConfig+0x5e8>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d16c      	bne.n	8001f96 <HAL_RCC_OscConfig+0x44a>
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001ec6:	fa93 f3a3 	rbit	r3, r3
 8001eca:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001ece:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ed2:	fab3 f383 	clz	r3, r3
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	095b      	lsrs	r3, r3, #5
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	f043 0301 	orr.w	r3, r3, #1
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d102      	bne.n	8001eec <HAL_RCC_OscConfig+0x3a0>
 8001ee6:	4b93      	ldr	r3, [pc, #588]	@ (8002134 <HAL_RCC_OscConfig+0x5e8>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	e013      	b.n	8001f14 <HAL_RCC_OscConfig+0x3c8>
 8001eec:	2302      	movs	r3, #2
 8001eee:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef2:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001ef6:	fa93 f3a3 	rbit	r3, r3
 8001efa:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001efe:	2302      	movs	r3, #2
 8001f00:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001f04:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001f08:	fa93 f3a3 	rbit	r3, r3
 8001f0c:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001f10:	4b88      	ldr	r3, [pc, #544]	@ (8002134 <HAL_RCC_OscConfig+0x5e8>)
 8001f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f14:	2202      	movs	r2, #2
 8001f16:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001f1a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001f1e:	fa92 f2a2 	rbit	r2, r2
 8001f22:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001f26:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001f2a:	fab2 f282 	clz	r2, r2
 8001f2e:	b2d2      	uxtb	r2, r2
 8001f30:	f042 0220 	orr.w	r2, r2, #32
 8001f34:	b2d2      	uxtb	r2, r2
 8001f36:	f002 021f 	and.w	r2, r2, #31
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f40:	4013      	ands	r3, r2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00a      	beq.n	8001f5c <HAL_RCC_OscConfig+0x410>
 8001f46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f4a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d002      	beq.n	8001f5c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	f000 be2e 	b.w	8002bb8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f5c:	4b75      	ldr	r3, [pc, #468]	@ (8002134 <HAL_RCC_OscConfig+0x5e8>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f68:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	695b      	ldr	r3, [r3, #20]
 8001f70:	21f8      	movs	r1, #248	@ 0xf8
 8001f72:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f76:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001f7a:	fa91 f1a1 	rbit	r1, r1
 8001f7e:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001f82:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001f86:	fab1 f181 	clz	r1, r1
 8001f8a:	b2c9      	uxtb	r1, r1
 8001f8c:	408b      	lsls	r3, r1
 8001f8e:	4969      	ldr	r1, [pc, #420]	@ (8002134 <HAL_RCC_OscConfig+0x5e8>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f94:	e0fd      	b.n	8002192 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f9a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f000 8088 	beq.w	80020b8 <HAL_RCC_OscConfig+0x56c>
 8001fa8:	2301      	movs	r3, #1
 8001faa:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fae:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001fb2:	fa93 f3a3 	rbit	r3, r3
 8001fb6:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001fba:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fbe:	fab3 f383 	clz	r3, r3
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001fc8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	461a      	mov	r2, r3
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd4:	f7ff f94e 	bl	8001274 <HAL_GetTick>
 8001fd8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fdc:	e00a      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fde:	f7ff f949 	bl	8001274 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d902      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	f000 bde2 	b.w	8002bb8 <HAL_RCC_OscConfig+0x106c>
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffa:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001ffe:	fa93 f3a3 	rbit	r3, r3
 8002002:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002006:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800200a:	fab3 f383 	clz	r3, r3
 800200e:	b2db      	uxtb	r3, r3
 8002010:	095b      	lsrs	r3, r3, #5
 8002012:	b2db      	uxtb	r3, r3
 8002014:	f043 0301 	orr.w	r3, r3, #1
 8002018:	b2db      	uxtb	r3, r3
 800201a:	2b01      	cmp	r3, #1
 800201c:	d102      	bne.n	8002024 <HAL_RCC_OscConfig+0x4d8>
 800201e:	4b45      	ldr	r3, [pc, #276]	@ (8002134 <HAL_RCC_OscConfig+0x5e8>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	e013      	b.n	800204c <HAL_RCC_OscConfig+0x500>
 8002024:	2302      	movs	r3, #2
 8002026:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800202e:	fa93 f3a3 	rbit	r3, r3
 8002032:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002036:	2302      	movs	r3, #2
 8002038:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800203c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002040:	fa93 f3a3 	rbit	r3, r3
 8002044:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002048:	4b3a      	ldr	r3, [pc, #232]	@ (8002134 <HAL_RCC_OscConfig+0x5e8>)
 800204a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800204c:	2202      	movs	r2, #2
 800204e:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002052:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002056:	fa92 f2a2 	rbit	r2, r2
 800205a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800205e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002062:	fab2 f282 	clz	r2, r2
 8002066:	b2d2      	uxtb	r2, r2
 8002068:	f042 0220 	orr.w	r2, r2, #32
 800206c:	b2d2      	uxtb	r2, r2
 800206e:	f002 021f 	and.w	r2, r2, #31
 8002072:	2101      	movs	r1, #1
 8002074:	fa01 f202 	lsl.w	r2, r1, r2
 8002078:	4013      	ands	r3, r2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d0af      	beq.n	8001fde <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800207e:	4b2d      	ldr	r3, [pc, #180]	@ (8002134 <HAL_RCC_OscConfig+0x5e8>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002086:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800208a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	21f8      	movs	r1, #248	@ 0xf8
 8002094:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002098:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800209c:	fa91 f1a1 	rbit	r1, r1
 80020a0:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80020a4:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80020a8:	fab1 f181 	clz	r1, r1
 80020ac:	b2c9      	uxtb	r1, r1
 80020ae:	408b      	lsls	r3, r1
 80020b0:	4920      	ldr	r1, [pc, #128]	@ (8002134 <HAL_RCC_OscConfig+0x5e8>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	600b      	str	r3, [r1, #0]
 80020b6:	e06c      	b.n	8002192 <HAL_RCC_OscConfig+0x646>
 80020b8:	2301      	movs	r3, #1
 80020ba:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020be:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80020c2:	fa93 f3a3 	rbit	r3, r3
 80020c6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80020ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020ce:	fab3 f383 	clz	r3, r3
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80020d8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	461a      	mov	r2, r3
 80020e0:	2300      	movs	r3, #0
 80020e2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e4:	f7ff f8c6 	bl	8001274 <HAL_GetTick>
 80020e8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ec:	e00a      	b.n	8002104 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020ee:	f7ff f8c1 	bl	8001274 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d902      	bls.n	8002104 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	f000 bd5a 	b.w	8002bb8 <HAL_RCC_OscConfig+0x106c>
 8002104:	2302      	movs	r3, #2
 8002106:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800210e:	fa93 f3a3 	rbit	r3, r3
 8002112:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002116:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800211a:	fab3 f383 	clz	r3, r3
 800211e:	b2db      	uxtb	r3, r3
 8002120:	095b      	lsrs	r3, r3, #5
 8002122:	b2db      	uxtb	r3, r3
 8002124:	f043 0301 	orr.w	r3, r3, #1
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b01      	cmp	r3, #1
 800212c:	d104      	bne.n	8002138 <HAL_RCC_OscConfig+0x5ec>
 800212e:	4b01      	ldr	r3, [pc, #4]	@ (8002134 <HAL_RCC_OscConfig+0x5e8>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	e015      	b.n	8002160 <HAL_RCC_OscConfig+0x614>
 8002134:	40021000 	.word	0x40021000
 8002138:	2302      	movs	r3, #2
 800213a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002142:	fa93 f3a3 	rbit	r3, r3
 8002146:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800214a:	2302      	movs	r3, #2
 800214c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002150:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002154:	fa93 f3a3 	rbit	r3, r3
 8002158:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800215c:	4bc8      	ldr	r3, [pc, #800]	@ (8002480 <HAL_RCC_OscConfig+0x934>)
 800215e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002160:	2202      	movs	r2, #2
 8002162:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002166:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800216a:	fa92 f2a2 	rbit	r2, r2
 800216e:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002172:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002176:	fab2 f282 	clz	r2, r2
 800217a:	b2d2      	uxtb	r2, r2
 800217c:	f042 0220 	orr.w	r2, r2, #32
 8002180:	b2d2      	uxtb	r2, r2
 8002182:	f002 021f 	and.w	r2, r2, #31
 8002186:	2101      	movs	r1, #1
 8002188:	fa01 f202 	lsl.w	r2, r1, r2
 800218c:	4013      	ands	r3, r2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1ad      	bne.n	80020ee <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002192:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002196:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0308 	and.w	r3, r3, #8
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	f000 8110 	beq.w	80023c8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021ac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d079      	beq.n	80022ac <HAL_RCC_OscConfig+0x760>
 80021b8:	2301      	movs	r3, #1
 80021ba:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021be:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80021c2:	fa93 f3a3 	rbit	r3, r3
 80021c6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80021ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021ce:	fab3 f383 	clz	r3, r3
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	461a      	mov	r2, r3
 80021d6:	4bab      	ldr	r3, [pc, #684]	@ (8002484 <HAL_RCC_OscConfig+0x938>)
 80021d8:	4413      	add	r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	461a      	mov	r2, r3
 80021de:	2301      	movs	r3, #1
 80021e0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e2:	f7ff f847 	bl	8001274 <HAL_GetTick>
 80021e6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ea:	e00a      	b.n	8002202 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021ec:	f7ff f842 	bl	8001274 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d902      	bls.n	8002202 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	f000 bcdb 	b.w	8002bb8 <HAL_RCC_OscConfig+0x106c>
 8002202:	2302      	movs	r3, #2
 8002204:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002208:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800220c:	fa93 f3a3 	rbit	r3, r3
 8002210:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002214:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002218:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800221c:	2202      	movs	r2, #2
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002224:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	fa93 f2a3 	rbit	r2, r3
 800222e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002232:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800223c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002240:	2202      	movs	r2, #2
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002248:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	fa93 f2a3 	rbit	r2, r3
 8002252:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002256:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800225a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800225c:	4b88      	ldr	r3, [pc, #544]	@ (8002480 <HAL_RCC_OscConfig+0x934>)
 800225e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002260:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002264:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002268:	2102      	movs	r1, #2
 800226a:	6019      	str	r1, [r3, #0]
 800226c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002270:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	fa93 f1a3 	rbit	r1, r3
 800227a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800227e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002282:	6019      	str	r1, [r3, #0]
  return result;
 8002284:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002288:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	fab3 f383 	clz	r3, r3
 8002292:	b2db      	uxtb	r3, r3
 8002294:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002298:	b2db      	uxtb	r3, r3
 800229a:	f003 031f 	and.w	r3, r3, #31
 800229e:	2101      	movs	r1, #1
 80022a0:	fa01 f303 	lsl.w	r3, r1, r3
 80022a4:	4013      	ands	r3, r2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d0a0      	beq.n	80021ec <HAL_RCC_OscConfig+0x6a0>
 80022aa:	e08d      	b.n	80023c8 <HAL_RCC_OscConfig+0x87c>
 80022ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022b0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80022b4:	2201      	movs	r2, #1
 80022b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022bc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	fa93 f2a3 	rbit	r2, r3
 80022c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ca:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80022ce:	601a      	str	r2, [r3, #0]
  return result;
 80022d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022d4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80022d8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022da:	fab3 f383 	clz	r3, r3
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	461a      	mov	r2, r3
 80022e2:	4b68      	ldr	r3, [pc, #416]	@ (8002484 <HAL_RCC_OscConfig+0x938>)
 80022e4:	4413      	add	r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	461a      	mov	r2, r3
 80022ea:	2300      	movs	r3, #0
 80022ec:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ee:	f7fe ffc1 	bl	8001274 <HAL_GetTick>
 80022f2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022f6:	e00a      	b.n	800230e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022f8:	f7fe ffbc 	bl	8001274 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	2b02      	cmp	r3, #2
 8002306:	d902      	bls.n	800230e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	f000 bc55 	b.w	8002bb8 <HAL_RCC_OscConfig+0x106c>
 800230e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002312:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002316:	2202      	movs	r2, #2
 8002318:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800231e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	fa93 f2a3 	rbit	r2, r3
 8002328:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800232c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002336:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800233a:	2202      	movs	r2, #2
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002342:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	fa93 f2a3 	rbit	r2, r3
 800234c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002350:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002354:	601a      	str	r2, [r3, #0]
 8002356:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800235a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800235e:	2202      	movs	r2, #2
 8002360:	601a      	str	r2, [r3, #0]
 8002362:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002366:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	fa93 f2a3 	rbit	r2, r3
 8002370:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002374:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002378:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800237a:	4b41      	ldr	r3, [pc, #260]	@ (8002480 <HAL_RCC_OscConfig+0x934>)
 800237c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800237e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002382:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002386:	2102      	movs	r1, #2
 8002388:	6019      	str	r1, [r3, #0]
 800238a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800238e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	fa93 f1a3 	rbit	r1, r3
 8002398:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800239c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80023a0:	6019      	str	r1, [r3, #0]
  return result;
 80023a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023a6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	fab3 f383 	clz	r3, r3
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	f003 031f 	and.w	r3, r3, #31
 80023bc:	2101      	movs	r1, #1
 80023be:	fa01 f303 	lsl.w	r3, r1, r3
 80023c2:	4013      	ands	r3, r2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d197      	bne.n	80022f8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023cc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0304 	and.w	r3, r3, #4
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f000 81a1 	beq.w	8002720 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023de:	2300      	movs	r3, #0
 80023e0:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023e4:	4b26      	ldr	r3, [pc, #152]	@ (8002480 <HAL_RCC_OscConfig+0x934>)
 80023e6:	69db      	ldr	r3, [r3, #28]
 80023e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d116      	bne.n	800241e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023f0:	4b23      	ldr	r3, [pc, #140]	@ (8002480 <HAL_RCC_OscConfig+0x934>)
 80023f2:	69db      	ldr	r3, [r3, #28]
 80023f4:	4a22      	ldr	r2, [pc, #136]	@ (8002480 <HAL_RCC_OscConfig+0x934>)
 80023f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023fa:	61d3      	str	r3, [r2, #28]
 80023fc:	4b20      	ldr	r3, [pc, #128]	@ (8002480 <HAL_RCC_OscConfig+0x934>)
 80023fe:	69db      	ldr	r3, [r3, #28]
 8002400:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002404:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002408:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800240c:	601a      	str	r2, [r3, #0]
 800240e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002412:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002416:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002418:	2301      	movs	r3, #1
 800241a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800241e:	4b1a      	ldr	r3, [pc, #104]	@ (8002488 <HAL_RCC_OscConfig+0x93c>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002426:	2b00      	cmp	r3, #0
 8002428:	d11a      	bne.n	8002460 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800242a:	4b17      	ldr	r3, [pc, #92]	@ (8002488 <HAL_RCC_OscConfig+0x93c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a16      	ldr	r2, [pc, #88]	@ (8002488 <HAL_RCC_OscConfig+0x93c>)
 8002430:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002434:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002436:	f7fe ff1d 	bl	8001274 <HAL_GetTick>
 800243a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800243e:	e009      	b.n	8002454 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002440:	f7fe ff18 	bl	8001274 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b64      	cmp	r3, #100	@ 0x64
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e3b1      	b.n	8002bb8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002454:	4b0c      	ldr	r3, [pc, #48]	@ (8002488 <HAL_RCC_OscConfig+0x93c>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800245c:	2b00      	cmp	r3, #0
 800245e:	d0ef      	beq.n	8002440 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002460:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002464:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d10d      	bne.n	800248c <HAL_RCC_OscConfig+0x940>
 8002470:	4b03      	ldr	r3, [pc, #12]	@ (8002480 <HAL_RCC_OscConfig+0x934>)
 8002472:	6a1b      	ldr	r3, [r3, #32]
 8002474:	4a02      	ldr	r2, [pc, #8]	@ (8002480 <HAL_RCC_OscConfig+0x934>)
 8002476:	f043 0301 	orr.w	r3, r3, #1
 800247a:	6213      	str	r3, [r2, #32]
 800247c:	e03c      	b.n	80024f8 <HAL_RCC_OscConfig+0x9ac>
 800247e:	bf00      	nop
 8002480:	40021000 	.word	0x40021000
 8002484:	10908120 	.word	0x10908120
 8002488:	40007000 	.word	0x40007000
 800248c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002490:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d10c      	bne.n	80024b6 <HAL_RCC_OscConfig+0x96a>
 800249c:	4bc1      	ldr	r3, [pc, #772]	@ (80027a4 <HAL_RCC_OscConfig+0xc58>)
 800249e:	6a1b      	ldr	r3, [r3, #32]
 80024a0:	4ac0      	ldr	r2, [pc, #768]	@ (80027a4 <HAL_RCC_OscConfig+0xc58>)
 80024a2:	f023 0301 	bic.w	r3, r3, #1
 80024a6:	6213      	str	r3, [r2, #32]
 80024a8:	4bbe      	ldr	r3, [pc, #760]	@ (80027a4 <HAL_RCC_OscConfig+0xc58>)
 80024aa:	6a1b      	ldr	r3, [r3, #32]
 80024ac:	4abd      	ldr	r2, [pc, #756]	@ (80027a4 <HAL_RCC_OscConfig+0xc58>)
 80024ae:	f023 0304 	bic.w	r3, r3, #4
 80024b2:	6213      	str	r3, [r2, #32]
 80024b4:	e020      	b.n	80024f8 <HAL_RCC_OscConfig+0x9ac>
 80024b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	2b05      	cmp	r3, #5
 80024c4:	d10c      	bne.n	80024e0 <HAL_RCC_OscConfig+0x994>
 80024c6:	4bb7      	ldr	r3, [pc, #732]	@ (80027a4 <HAL_RCC_OscConfig+0xc58>)
 80024c8:	6a1b      	ldr	r3, [r3, #32]
 80024ca:	4ab6      	ldr	r2, [pc, #728]	@ (80027a4 <HAL_RCC_OscConfig+0xc58>)
 80024cc:	f043 0304 	orr.w	r3, r3, #4
 80024d0:	6213      	str	r3, [r2, #32]
 80024d2:	4bb4      	ldr	r3, [pc, #720]	@ (80027a4 <HAL_RCC_OscConfig+0xc58>)
 80024d4:	6a1b      	ldr	r3, [r3, #32]
 80024d6:	4ab3      	ldr	r2, [pc, #716]	@ (80027a4 <HAL_RCC_OscConfig+0xc58>)
 80024d8:	f043 0301 	orr.w	r3, r3, #1
 80024dc:	6213      	str	r3, [r2, #32]
 80024de:	e00b      	b.n	80024f8 <HAL_RCC_OscConfig+0x9ac>
 80024e0:	4bb0      	ldr	r3, [pc, #704]	@ (80027a4 <HAL_RCC_OscConfig+0xc58>)
 80024e2:	6a1b      	ldr	r3, [r3, #32]
 80024e4:	4aaf      	ldr	r2, [pc, #700]	@ (80027a4 <HAL_RCC_OscConfig+0xc58>)
 80024e6:	f023 0301 	bic.w	r3, r3, #1
 80024ea:	6213      	str	r3, [r2, #32]
 80024ec:	4bad      	ldr	r3, [pc, #692]	@ (80027a4 <HAL_RCC_OscConfig+0xc58>)
 80024ee:	6a1b      	ldr	r3, [r3, #32]
 80024f0:	4aac      	ldr	r2, [pc, #688]	@ (80027a4 <HAL_RCC_OscConfig+0xc58>)
 80024f2:	f023 0304 	bic.w	r3, r3, #4
 80024f6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024fc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	2b00      	cmp	r3, #0
 8002506:	f000 8081 	beq.w	800260c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800250a:	f7fe feb3 	bl	8001274 <HAL_GetTick>
 800250e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002512:	e00b      	b.n	800252c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002514:	f7fe feae 	bl	8001274 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002524:	4293      	cmp	r3, r2
 8002526:	d901      	bls.n	800252c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e345      	b.n	8002bb8 <HAL_RCC_OscConfig+0x106c>
 800252c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002530:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002534:	2202      	movs	r2, #2
 8002536:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002538:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800253c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	fa93 f2a3 	rbit	r2, r3
 8002546:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800254a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002554:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002558:	2202      	movs	r2, #2
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002560:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	fa93 f2a3 	rbit	r2, r3
 800256a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800256e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002572:	601a      	str	r2, [r3, #0]
  return result;
 8002574:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002578:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800257c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800257e:	fab3 f383 	clz	r3, r3
 8002582:	b2db      	uxtb	r3, r3
 8002584:	095b      	lsrs	r3, r3, #5
 8002586:	b2db      	uxtb	r3, r3
 8002588:	f043 0302 	orr.w	r3, r3, #2
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b02      	cmp	r3, #2
 8002590:	d102      	bne.n	8002598 <HAL_RCC_OscConfig+0xa4c>
 8002592:	4b84      	ldr	r3, [pc, #528]	@ (80027a4 <HAL_RCC_OscConfig+0xc58>)
 8002594:	6a1b      	ldr	r3, [r3, #32]
 8002596:	e013      	b.n	80025c0 <HAL_RCC_OscConfig+0xa74>
 8002598:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800259c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80025a0:	2202      	movs	r2, #2
 80025a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025a8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	fa93 f2a3 	rbit	r2, r3
 80025b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025b6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80025ba:	601a      	str	r2, [r3, #0]
 80025bc:	4b79      	ldr	r3, [pc, #484]	@ (80027a4 <HAL_RCC_OscConfig+0xc58>)
 80025be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025c4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80025c8:	2102      	movs	r1, #2
 80025ca:	6011      	str	r1, [r2, #0]
 80025cc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025d0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80025d4:	6812      	ldr	r2, [r2, #0]
 80025d6:	fa92 f1a2 	rbit	r1, r2
 80025da:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025de:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80025e2:	6011      	str	r1, [r2, #0]
  return result;
 80025e4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025e8:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80025ec:	6812      	ldr	r2, [r2, #0]
 80025ee:	fab2 f282 	clz	r2, r2
 80025f2:	b2d2      	uxtb	r2, r2
 80025f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80025f8:	b2d2      	uxtb	r2, r2
 80025fa:	f002 021f 	and.w	r2, r2, #31
 80025fe:	2101      	movs	r1, #1
 8002600:	fa01 f202 	lsl.w	r2, r1, r2
 8002604:	4013      	ands	r3, r2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d084      	beq.n	8002514 <HAL_RCC_OscConfig+0x9c8>
 800260a:	e07f      	b.n	800270c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800260c:	f7fe fe32 	bl	8001274 <HAL_GetTick>
 8002610:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002614:	e00b      	b.n	800262e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002616:	f7fe fe2d 	bl	8001274 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002626:	4293      	cmp	r3, r2
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e2c4      	b.n	8002bb8 <HAL_RCC_OscConfig+0x106c>
 800262e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002632:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002636:	2202      	movs	r2, #2
 8002638:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800263e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	fa93 f2a3 	rbit	r2, r3
 8002648:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800264c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002650:	601a      	str	r2, [r3, #0]
 8002652:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002656:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800265a:	2202      	movs	r2, #2
 800265c:	601a      	str	r2, [r3, #0]
 800265e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002662:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	fa93 f2a3 	rbit	r2, r3
 800266c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002670:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002674:	601a      	str	r2, [r3, #0]
  return result;
 8002676:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800267a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800267e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002680:	fab3 f383 	clz	r3, r3
 8002684:	b2db      	uxtb	r3, r3
 8002686:	095b      	lsrs	r3, r3, #5
 8002688:	b2db      	uxtb	r3, r3
 800268a:	f043 0302 	orr.w	r3, r3, #2
 800268e:	b2db      	uxtb	r3, r3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d102      	bne.n	800269a <HAL_RCC_OscConfig+0xb4e>
 8002694:	4b43      	ldr	r3, [pc, #268]	@ (80027a4 <HAL_RCC_OscConfig+0xc58>)
 8002696:	6a1b      	ldr	r3, [r3, #32]
 8002698:	e013      	b.n	80026c2 <HAL_RCC_OscConfig+0xb76>
 800269a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800269e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80026a2:	2202      	movs	r2, #2
 80026a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026aa:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	fa93 f2a3 	rbit	r2, r3
 80026b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026b8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80026bc:	601a      	str	r2, [r3, #0]
 80026be:	4b39      	ldr	r3, [pc, #228]	@ (80027a4 <HAL_RCC_OscConfig+0xc58>)
 80026c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026c6:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80026ca:	2102      	movs	r1, #2
 80026cc:	6011      	str	r1, [r2, #0]
 80026ce:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026d2:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80026d6:	6812      	ldr	r2, [r2, #0]
 80026d8:	fa92 f1a2 	rbit	r1, r2
 80026dc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026e0:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80026e4:	6011      	str	r1, [r2, #0]
  return result;
 80026e6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026ea:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80026ee:	6812      	ldr	r2, [r2, #0]
 80026f0:	fab2 f282 	clz	r2, r2
 80026f4:	b2d2      	uxtb	r2, r2
 80026f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80026fa:	b2d2      	uxtb	r2, r2
 80026fc:	f002 021f 	and.w	r2, r2, #31
 8002700:	2101      	movs	r1, #1
 8002702:	fa01 f202 	lsl.w	r2, r1, r2
 8002706:	4013      	ands	r3, r2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d184      	bne.n	8002616 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800270c:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002710:	2b01      	cmp	r3, #1
 8002712:	d105      	bne.n	8002720 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002714:	4b23      	ldr	r3, [pc, #140]	@ (80027a4 <HAL_RCC_OscConfig+0xc58>)
 8002716:	69db      	ldr	r3, [r3, #28]
 8002718:	4a22      	ldr	r2, [pc, #136]	@ (80027a4 <HAL_RCC_OscConfig+0xc58>)
 800271a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800271e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002720:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002724:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	69db      	ldr	r3, [r3, #28]
 800272c:	2b00      	cmp	r3, #0
 800272e:	f000 8242 	beq.w	8002bb6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002732:	4b1c      	ldr	r3, [pc, #112]	@ (80027a4 <HAL_RCC_OscConfig+0xc58>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f003 030c 	and.w	r3, r3, #12
 800273a:	2b08      	cmp	r3, #8
 800273c:	f000 8213 	beq.w	8002b66 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002740:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002744:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	69db      	ldr	r3, [r3, #28]
 800274c:	2b02      	cmp	r3, #2
 800274e:	f040 8162 	bne.w	8002a16 <HAL_RCC_OscConfig+0xeca>
 8002752:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002756:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800275a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800275e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002760:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002764:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	fa93 f2a3 	rbit	r2, r3
 800276e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002772:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002776:	601a      	str	r2, [r3, #0]
  return result;
 8002778:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800277c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002780:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002782:	fab3 f383 	clz	r3, r3
 8002786:	b2db      	uxtb	r3, r3
 8002788:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800278c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	461a      	mov	r2, r3
 8002794:	2300      	movs	r3, #0
 8002796:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002798:	f7fe fd6c 	bl	8001274 <HAL_GetTick>
 800279c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027a0:	e00c      	b.n	80027bc <HAL_RCC_OscConfig+0xc70>
 80027a2:	bf00      	nop
 80027a4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027a8:	f7fe fd64 	bl	8001274 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d901      	bls.n	80027bc <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e1fd      	b.n	8002bb8 <HAL_RCC_OscConfig+0x106c>
 80027bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027c0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80027c4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ce:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	fa93 f2a3 	rbit	r2, r3
 80027d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027dc:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80027e0:	601a      	str	r2, [r3, #0]
  return result;
 80027e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027e6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80027ea:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027ec:	fab3 f383 	clz	r3, r3
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	095b      	lsrs	r3, r3, #5
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	f043 0301 	orr.w	r3, r3, #1
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d102      	bne.n	8002806 <HAL_RCC_OscConfig+0xcba>
 8002800:	4bb0      	ldr	r3, [pc, #704]	@ (8002ac4 <HAL_RCC_OscConfig+0xf78>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	e027      	b.n	8002856 <HAL_RCC_OscConfig+0xd0a>
 8002806:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800280a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800280e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002812:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002814:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002818:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	fa93 f2a3 	rbit	r2, r3
 8002822:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002826:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002830:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002834:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002838:	601a      	str	r2, [r3, #0]
 800283a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800283e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	fa93 f2a3 	rbit	r2, r3
 8002848:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800284c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002850:	601a      	str	r2, [r3, #0]
 8002852:	4b9c      	ldr	r3, [pc, #624]	@ (8002ac4 <HAL_RCC_OscConfig+0xf78>)
 8002854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002856:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800285a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800285e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002862:	6011      	str	r1, [r2, #0]
 8002864:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002868:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800286c:	6812      	ldr	r2, [r2, #0]
 800286e:	fa92 f1a2 	rbit	r1, r2
 8002872:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002876:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800287a:	6011      	str	r1, [r2, #0]
  return result;
 800287c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002880:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002884:	6812      	ldr	r2, [r2, #0]
 8002886:	fab2 f282 	clz	r2, r2
 800288a:	b2d2      	uxtb	r2, r2
 800288c:	f042 0220 	orr.w	r2, r2, #32
 8002890:	b2d2      	uxtb	r2, r2
 8002892:	f002 021f 	and.w	r2, r2, #31
 8002896:	2101      	movs	r1, #1
 8002898:	fa01 f202 	lsl.w	r2, r1, r2
 800289c:	4013      	ands	r3, r2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d182      	bne.n	80027a8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028a2:	4b88      	ldr	r3, [pc, #544]	@ (8002ac4 <HAL_RCC_OscConfig+0xf78>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80028aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80028b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	6a1b      	ldr	r3, [r3, #32]
 80028c2:	430b      	orrs	r3, r1
 80028c4:	497f      	ldr	r1, [pc, #508]	@ (8002ac4 <HAL_RCC_OscConfig+0xf78>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	604b      	str	r3, [r1, #4]
 80028ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ce:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80028d2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80028d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028dc:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	fa93 f2a3 	rbit	r2, r3
 80028e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ea:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80028ee:	601a      	str	r2, [r3, #0]
  return result;
 80028f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028f4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80028f8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028fa:	fab3 f383 	clz	r3, r3
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002904:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	461a      	mov	r2, r3
 800290c:	2301      	movs	r3, #1
 800290e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002910:	f7fe fcb0 	bl	8001274 <HAL_GetTick>
 8002914:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002918:	e009      	b.n	800292e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800291a:	f7fe fcab 	bl	8001274 <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e144      	b.n	8002bb8 <HAL_RCC_OscConfig+0x106c>
 800292e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002932:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002936:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800293a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002940:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	fa93 f2a3 	rbit	r2, r3
 800294a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800294e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002952:	601a      	str	r2, [r3, #0]
  return result;
 8002954:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002958:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800295c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800295e:	fab3 f383 	clz	r3, r3
 8002962:	b2db      	uxtb	r3, r3
 8002964:	095b      	lsrs	r3, r3, #5
 8002966:	b2db      	uxtb	r3, r3
 8002968:	f043 0301 	orr.w	r3, r3, #1
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b01      	cmp	r3, #1
 8002970:	d102      	bne.n	8002978 <HAL_RCC_OscConfig+0xe2c>
 8002972:	4b54      	ldr	r3, [pc, #336]	@ (8002ac4 <HAL_RCC_OscConfig+0xf78>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	e027      	b.n	80029c8 <HAL_RCC_OscConfig+0xe7c>
 8002978:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800297c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002980:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002984:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002986:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800298a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	fa93 f2a3 	rbit	r2, r3
 8002994:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002998:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800299c:	601a      	str	r2, [r3, #0]
 800299e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029a2:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80029a6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029b0:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	fa93 f2a3 	rbit	r2, r3
 80029ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029be:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	4b3f      	ldr	r3, [pc, #252]	@ (8002ac4 <HAL_RCC_OscConfig+0xf78>)
 80029c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029cc:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80029d0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80029d4:	6011      	str	r1, [r2, #0]
 80029d6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029da:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80029de:	6812      	ldr	r2, [r2, #0]
 80029e0:	fa92 f1a2 	rbit	r1, r2
 80029e4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029e8:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80029ec:	6011      	str	r1, [r2, #0]
  return result;
 80029ee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029f2:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80029f6:	6812      	ldr	r2, [r2, #0]
 80029f8:	fab2 f282 	clz	r2, r2
 80029fc:	b2d2      	uxtb	r2, r2
 80029fe:	f042 0220 	orr.w	r2, r2, #32
 8002a02:	b2d2      	uxtb	r2, r2
 8002a04:	f002 021f 	and.w	r2, r2, #31
 8002a08:	2101      	movs	r1, #1
 8002a0a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a0e:	4013      	ands	r3, r2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d082      	beq.n	800291a <HAL_RCC_OscConfig+0xdce>
 8002a14:	e0cf      	b.n	8002bb6 <HAL_RCC_OscConfig+0x106a>
 8002a16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a1a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002a1e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002a22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a28:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	fa93 f2a3 	rbit	r2, r3
 8002a32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a36:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002a3a:	601a      	str	r2, [r3, #0]
  return result;
 8002a3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a40:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002a44:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a46:	fab3 f383 	clz	r3, r3
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002a50:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	461a      	mov	r2, r3
 8002a58:	2300      	movs	r3, #0
 8002a5a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5c:	f7fe fc0a 	bl	8001274 <HAL_GetTick>
 8002a60:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a64:	e009      	b.n	8002a7a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a66:	f7fe fc05 	bl	8001274 <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e09e      	b.n	8002bb8 <HAL_RCC_OscConfig+0x106c>
 8002a7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a7e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002a82:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a8c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	fa93 f2a3 	rbit	r2, r3
 8002a96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a9a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002a9e:	601a      	str	r2, [r3, #0]
  return result;
 8002aa0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aa4:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002aa8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aaa:	fab3 f383 	clz	r3, r3
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	095b      	lsrs	r3, r3, #5
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	f043 0301 	orr.w	r3, r3, #1
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d104      	bne.n	8002ac8 <HAL_RCC_OscConfig+0xf7c>
 8002abe:	4b01      	ldr	r3, [pc, #4]	@ (8002ac4 <HAL_RCC_OscConfig+0xf78>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	e029      	b.n	8002b18 <HAL_RCC_OscConfig+0xfcc>
 8002ac4:	40021000 	.word	0x40021000
 8002ac8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002acc:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002ad0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ad4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ada:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	fa93 f2a3 	rbit	r2, r3
 8002ae4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ae8:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002aec:	601a      	str	r2, [r3, #0]
 8002aee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002af2:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002af6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b00:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	fa93 f2a3 	rbit	r2, r3
 8002b0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b0e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002b12:	601a      	str	r2, [r3, #0]
 8002b14:	4b2b      	ldr	r3, [pc, #172]	@ (8002bc4 <HAL_RCC_OscConfig+0x1078>)
 8002b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b18:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b1c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002b20:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002b24:	6011      	str	r1, [r2, #0]
 8002b26:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b2a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002b2e:	6812      	ldr	r2, [r2, #0]
 8002b30:	fa92 f1a2 	rbit	r1, r2
 8002b34:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b38:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002b3c:	6011      	str	r1, [r2, #0]
  return result;
 8002b3e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b42:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002b46:	6812      	ldr	r2, [r2, #0]
 8002b48:	fab2 f282 	clz	r2, r2
 8002b4c:	b2d2      	uxtb	r2, r2
 8002b4e:	f042 0220 	orr.w	r2, r2, #32
 8002b52:	b2d2      	uxtb	r2, r2
 8002b54:	f002 021f 	and.w	r2, r2, #31
 8002b58:	2101      	movs	r1, #1
 8002b5a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b5e:	4013      	ands	r3, r2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d180      	bne.n	8002a66 <HAL_RCC_OscConfig+0xf1a>
 8002b64:	e027      	b.n	8002bb6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b6a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	69db      	ldr	r3, [r3, #28]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d101      	bne.n	8002b7a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e01e      	b.n	8002bb8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b7a:	4b12      	ldr	r3, [pc, #72]	@ (8002bc4 <HAL_RCC_OscConfig+0x1078>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b82:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002b86:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002b8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b8e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	6a1b      	ldr	r3, [r3, #32]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d10b      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002b9a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002b9e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002ba2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ba6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d001      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e000      	b.n	8002bb8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	40021000 	.word	0x40021000

08002bc8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b09e      	sub	sp, #120	@ 0x78
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d101      	bne.n	8002be0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e162      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002be0:	4b90      	ldr	r3, [pc, #576]	@ (8002e24 <HAL_RCC_ClockConfig+0x25c>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0307 	and.w	r3, r3, #7
 8002be8:	683a      	ldr	r2, [r7, #0]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d910      	bls.n	8002c10 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bee:	4b8d      	ldr	r3, [pc, #564]	@ (8002e24 <HAL_RCC_ClockConfig+0x25c>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f023 0207 	bic.w	r2, r3, #7
 8002bf6:	498b      	ldr	r1, [pc, #556]	@ (8002e24 <HAL_RCC_ClockConfig+0x25c>)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bfe:	4b89      	ldr	r3, [pc, #548]	@ (8002e24 <HAL_RCC_ClockConfig+0x25c>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d001      	beq.n	8002c10 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e14a      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d008      	beq.n	8002c2e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c1c:	4b82      	ldr	r3, [pc, #520]	@ (8002e28 <HAL_RCC_ClockConfig+0x260>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	497f      	ldr	r1, [pc, #508]	@ (8002e28 <HAL_RCC_ClockConfig+0x260>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f000 80dc 	beq.w	8002df4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d13c      	bne.n	8002cbe <HAL_RCC_ClockConfig+0xf6>
 8002c44:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c48:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c4c:	fa93 f3a3 	rbit	r3, r3
 8002c50:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002c52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c54:	fab3 f383 	clz	r3, r3
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	095b      	lsrs	r3, r3, #5
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	f043 0301 	orr.w	r3, r3, #1
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d102      	bne.n	8002c6e <HAL_RCC_ClockConfig+0xa6>
 8002c68:	4b6f      	ldr	r3, [pc, #444]	@ (8002e28 <HAL_RCC_ClockConfig+0x260>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	e00f      	b.n	8002c8e <HAL_RCC_ClockConfig+0xc6>
 8002c6e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c72:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c74:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c76:	fa93 f3a3 	rbit	r3, r3
 8002c7a:	667b      	str	r3, [r7, #100]	@ 0x64
 8002c7c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c80:	663b      	str	r3, [r7, #96]	@ 0x60
 8002c82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c84:	fa93 f3a3 	rbit	r3, r3
 8002c88:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002c8a:	4b67      	ldr	r3, [pc, #412]	@ (8002e28 <HAL_RCC_ClockConfig+0x260>)
 8002c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c8e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002c92:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002c94:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002c96:	fa92 f2a2 	rbit	r2, r2
 8002c9a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002c9c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002c9e:	fab2 f282 	clz	r2, r2
 8002ca2:	b2d2      	uxtb	r2, r2
 8002ca4:	f042 0220 	orr.w	r2, r2, #32
 8002ca8:	b2d2      	uxtb	r2, r2
 8002caa:	f002 021f 	and.w	r2, r2, #31
 8002cae:	2101      	movs	r1, #1
 8002cb0:	fa01 f202 	lsl.w	r2, r1, r2
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d17b      	bne.n	8002db2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e0f3      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d13c      	bne.n	8002d40 <HAL_RCC_ClockConfig+0x178>
 8002cc6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002cca:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ccc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002cce:	fa93 f3a3 	rbit	r3, r3
 8002cd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002cd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cd6:	fab3 f383 	clz	r3, r3
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	095b      	lsrs	r3, r3, #5
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	f043 0301 	orr.w	r3, r3, #1
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d102      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0x128>
 8002cea:	4b4f      	ldr	r3, [pc, #316]	@ (8002e28 <HAL_RCC_ClockConfig+0x260>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	e00f      	b.n	8002d10 <HAL_RCC_ClockConfig+0x148>
 8002cf0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002cf4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cf8:	fa93 f3a3 	rbit	r3, r3
 8002cfc:	647b      	str	r3, [r7, #68]	@ 0x44
 8002cfe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d02:	643b      	str	r3, [r7, #64]	@ 0x40
 8002d04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d06:	fa93 f3a3 	rbit	r3, r3
 8002d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d0c:	4b46      	ldr	r3, [pc, #280]	@ (8002e28 <HAL_RCC_ClockConfig+0x260>)
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d10:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d14:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002d16:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002d18:	fa92 f2a2 	rbit	r2, r2
 8002d1c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002d1e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002d20:	fab2 f282 	clz	r2, r2
 8002d24:	b2d2      	uxtb	r2, r2
 8002d26:	f042 0220 	orr.w	r2, r2, #32
 8002d2a:	b2d2      	uxtb	r2, r2
 8002d2c:	f002 021f 	and.w	r2, r2, #31
 8002d30:	2101      	movs	r1, #1
 8002d32:	fa01 f202 	lsl.w	r2, r1, r2
 8002d36:	4013      	ands	r3, r2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d13a      	bne.n	8002db2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e0b2      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x2de>
 8002d40:	2302      	movs	r3, #2
 8002d42:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d46:	fa93 f3a3 	rbit	r3, r3
 8002d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002d4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d4e:	fab3 f383 	clz	r3, r3
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	095b      	lsrs	r3, r3, #5
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	f043 0301 	orr.w	r3, r3, #1
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d102      	bne.n	8002d68 <HAL_RCC_ClockConfig+0x1a0>
 8002d62:	4b31      	ldr	r3, [pc, #196]	@ (8002e28 <HAL_RCC_ClockConfig+0x260>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	e00d      	b.n	8002d84 <HAL_RCC_ClockConfig+0x1bc>
 8002d68:	2302      	movs	r3, #2
 8002d6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d6e:	fa93 f3a3 	rbit	r3, r3
 8002d72:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d74:	2302      	movs	r3, #2
 8002d76:	623b      	str	r3, [r7, #32]
 8002d78:	6a3b      	ldr	r3, [r7, #32]
 8002d7a:	fa93 f3a3 	rbit	r3, r3
 8002d7e:	61fb      	str	r3, [r7, #28]
 8002d80:	4b29      	ldr	r3, [pc, #164]	@ (8002e28 <HAL_RCC_ClockConfig+0x260>)
 8002d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d84:	2202      	movs	r2, #2
 8002d86:	61ba      	str	r2, [r7, #24]
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	fa92 f2a2 	rbit	r2, r2
 8002d8e:	617a      	str	r2, [r7, #20]
  return result;
 8002d90:	697a      	ldr	r2, [r7, #20]
 8002d92:	fab2 f282 	clz	r2, r2
 8002d96:	b2d2      	uxtb	r2, r2
 8002d98:	f042 0220 	orr.w	r2, r2, #32
 8002d9c:	b2d2      	uxtb	r2, r2
 8002d9e:	f002 021f 	and.w	r2, r2, #31
 8002da2:	2101      	movs	r1, #1
 8002da4:	fa01 f202 	lsl.w	r2, r1, r2
 8002da8:	4013      	ands	r3, r2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e079      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002db2:	4b1d      	ldr	r3, [pc, #116]	@ (8002e28 <HAL_RCC_ClockConfig+0x260>)
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f023 0203 	bic.w	r2, r3, #3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	491a      	ldr	r1, [pc, #104]	@ (8002e28 <HAL_RCC_ClockConfig+0x260>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dc4:	f7fe fa56 	bl	8001274 <HAL_GetTick>
 8002dc8:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dca:	e00a      	b.n	8002de2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dcc:	f7fe fa52 	bl	8001274 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e061      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002de2:	4b11      	ldr	r3, [pc, #68]	@ (8002e28 <HAL_RCC_ClockConfig+0x260>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f003 020c 	and.w	r2, r3, #12
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d1eb      	bne.n	8002dcc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002df4:	4b0b      	ldr	r3, [pc, #44]	@ (8002e24 <HAL_RCC_ClockConfig+0x25c>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0307 	and.w	r3, r3, #7
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d214      	bcs.n	8002e2c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e02:	4b08      	ldr	r3, [pc, #32]	@ (8002e24 <HAL_RCC_ClockConfig+0x25c>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f023 0207 	bic.w	r2, r3, #7
 8002e0a:	4906      	ldr	r1, [pc, #24]	@ (8002e24 <HAL_RCC_ClockConfig+0x25c>)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e12:	4b04      	ldr	r3, [pc, #16]	@ (8002e24 <HAL_RCC_ClockConfig+0x25c>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0307 	and.w	r3, r3, #7
 8002e1a:	683a      	ldr	r2, [r7, #0]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d005      	beq.n	8002e2c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e040      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x2de>
 8002e24:	40022000 	.word	0x40022000
 8002e28:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0304 	and.w	r3, r3, #4
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d008      	beq.n	8002e4a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e38:	4b1d      	ldr	r3, [pc, #116]	@ (8002eb0 <HAL_RCC_ClockConfig+0x2e8>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	491a      	ldr	r1, [pc, #104]	@ (8002eb0 <HAL_RCC_ClockConfig+0x2e8>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0308 	and.w	r3, r3, #8
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d009      	beq.n	8002e6a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e56:	4b16      	ldr	r3, [pc, #88]	@ (8002eb0 <HAL_RCC_ClockConfig+0x2e8>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	4912      	ldr	r1, [pc, #72]	@ (8002eb0 <HAL_RCC_ClockConfig+0x2e8>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002e6a:	f000 f829 	bl	8002ec0 <HAL_RCC_GetSysClockFreq>
 8002e6e:	4601      	mov	r1, r0
 8002e70:	4b0f      	ldr	r3, [pc, #60]	@ (8002eb0 <HAL_RCC_ClockConfig+0x2e8>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e78:	22f0      	movs	r2, #240	@ 0xf0
 8002e7a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7c:	693a      	ldr	r2, [r7, #16]
 8002e7e:	fa92 f2a2 	rbit	r2, r2
 8002e82:	60fa      	str	r2, [r7, #12]
  return result;
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	fab2 f282 	clz	r2, r2
 8002e8a:	b2d2      	uxtb	r2, r2
 8002e8c:	40d3      	lsrs	r3, r2
 8002e8e:	4a09      	ldr	r2, [pc, #36]	@ (8002eb4 <HAL_RCC_ClockConfig+0x2ec>)
 8002e90:	5cd3      	ldrb	r3, [r2, r3]
 8002e92:	fa21 f303 	lsr.w	r3, r1, r3
 8002e96:	4a08      	ldr	r2, [pc, #32]	@ (8002eb8 <HAL_RCC_ClockConfig+0x2f0>)
 8002e98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002e9a:	4b08      	ldr	r3, [pc, #32]	@ (8002ebc <HAL_RCC_ClockConfig+0x2f4>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7fe f9a4 	bl	80011ec <HAL_InitTick>
  
  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3778      	adds	r7, #120	@ 0x78
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	080056ac 	.word	0x080056ac
 8002eb8:	2000006c 	.word	0x2000006c
 8002ebc:	20000070 	.word	0x20000070

08002ec0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b087      	sub	sp, #28
 8002ec4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	60fb      	str	r3, [r7, #12]
 8002eca:	2300      	movs	r3, #0
 8002ecc:	60bb      	str	r3, [r7, #8]
 8002ece:	2300      	movs	r3, #0
 8002ed0:	617b      	str	r3, [r7, #20]
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002eda:	4b1e      	ldr	r3, [pc, #120]	@ (8002f54 <HAL_RCC_GetSysClockFreq+0x94>)
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f003 030c 	and.w	r3, r3, #12
 8002ee6:	2b04      	cmp	r3, #4
 8002ee8:	d002      	beq.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x30>
 8002eea:	2b08      	cmp	r3, #8
 8002eec:	d003      	beq.n	8002ef6 <HAL_RCC_GetSysClockFreq+0x36>
 8002eee:	e026      	b.n	8002f3e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ef0:	4b19      	ldr	r3, [pc, #100]	@ (8002f58 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ef2:	613b      	str	r3, [r7, #16]
      break;
 8002ef4:	e026      	b.n	8002f44 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	0c9b      	lsrs	r3, r3, #18
 8002efa:	f003 030f 	and.w	r3, r3, #15
 8002efe:	4a17      	ldr	r2, [pc, #92]	@ (8002f5c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f00:	5cd3      	ldrb	r3, [r2, r3]
 8002f02:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002f04:	4b13      	ldr	r3, [pc, #76]	@ (8002f54 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f08:	f003 030f 	and.w	r3, r3, #15
 8002f0c:	4a14      	ldr	r2, [pc, #80]	@ (8002f60 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002f0e:	5cd3      	ldrb	r3, [r2, r3]
 8002f10:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d008      	beq.n	8002f2e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002f1c:	4a0e      	ldr	r2, [pc, #56]	@ (8002f58 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	fb02 f303 	mul.w	r3, r2, r3
 8002f2a:	617b      	str	r3, [r7, #20]
 8002f2c:	e004      	b.n	8002f38 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a0c      	ldr	r2, [pc, #48]	@ (8002f64 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002f32:	fb02 f303 	mul.w	r3, r2, r3
 8002f36:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	613b      	str	r3, [r7, #16]
      break;
 8002f3c:	e002      	b.n	8002f44 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f3e:	4b06      	ldr	r3, [pc, #24]	@ (8002f58 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f40:	613b      	str	r3, [r7, #16]
      break;
 8002f42:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f44:	693b      	ldr	r3, [r7, #16]
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	371c      	adds	r7, #28
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	40021000 	.word	0x40021000
 8002f58:	007a1200 	.word	0x007a1200
 8002f5c:	080056c4 	.word	0x080056c4
 8002f60:	080056d4 	.word	0x080056d4
 8002f64:	003d0900 	.word	0x003d0900

08002f68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f6c:	4b03      	ldr	r3, [pc, #12]	@ (8002f7c <HAL_RCC_GetHCLKFreq+0x14>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	2000006c 	.word	0x2000006c

08002f80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002f86:	f7ff ffef 	bl	8002f68 <HAL_RCC_GetHCLKFreq>
 8002f8a:	4601      	mov	r1, r0
 8002f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002fbc <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002f94:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002f98:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	fa92 f2a2 	rbit	r2, r2
 8002fa0:	603a      	str	r2, [r7, #0]
  return result;
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	fab2 f282 	clz	r2, r2
 8002fa8:	b2d2      	uxtb	r2, r2
 8002faa:	40d3      	lsrs	r3, r2
 8002fac:	4a04      	ldr	r2, [pc, #16]	@ (8002fc0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002fae:	5cd3      	ldrb	r3, [r2, r3]
 8002fb0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3708      	adds	r7, #8
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	40021000 	.word	0x40021000
 8002fc0:	080056bc 	.word	0x080056bc

08002fc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002fca:	f7ff ffcd 	bl	8002f68 <HAL_RCC_GetHCLKFreq>
 8002fce:	4601      	mov	r1, r0
 8002fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8003000 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002fd8:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002fdc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	fa92 f2a2 	rbit	r2, r2
 8002fe4:	603a      	str	r2, [r7, #0]
  return result;
 8002fe6:	683a      	ldr	r2, [r7, #0]
 8002fe8:	fab2 f282 	clz	r2, r2
 8002fec:	b2d2      	uxtb	r2, r2
 8002fee:	40d3      	lsrs	r3, r2
 8002ff0:	4a04      	ldr	r2, [pc, #16]	@ (8003004 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002ff2:	5cd3      	ldrb	r3, [r2, r3]
 8002ff4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3708      	adds	r7, #8
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	40021000 	.word	0x40021000
 8003004:	080056bc 	.word	0x080056bc

08003008 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b092      	sub	sp, #72	@ 0x48
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003010:	2300      	movs	r3, #0
 8003012:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003014:	2300      	movs	r3, #0
 8003016:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003018:	2300      	movs	r3, #0
 800301a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003026:	2b00      	cmp	r3, #0
 8003028:	f000 80cd 	beq.w	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800302c:	4b86      	ldr	r3, [pc, #536]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800302e:	69db      	ldr	r3, [r3, #28]
 8003030:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d10e      	bne.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003038:	4b83      	ldr	r3, [pc, #524]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800303a:	69db      	ldr	r3, [r3, #28]
 800303c:	4a82      	ldr	r2, [pc, #520]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800303e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003042:	61d3      	str	r3, [r2, #28]
 8003044:	4b80      	ldr	r3, [pc, #512]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003046:	69db      	ldr	r3, [r3, #28]
 8003048:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800304c:	60bb      	str	r3, [r7, #8]
 800304e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003050:	2301      	movs	r3, #1
 8003052:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003056:	4b7d      	ldr	r3, [pc, #500]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800305e:	2b00      	cmp	r3, #0
 8003060:	d118      	bne.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003062:	4b7a      	ldr	r3, [pc, #488]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a79      	ldr	r2, [pc, #484]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003068:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800306c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800306e:	f7fe f901 	bl	8001274 <HAL_GetTick>
 8003072:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003074:	e008      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003076:	f7fe f8fd 	bl	8001274 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	2b64      	cmp	r3, #100	@ 0x64
 8003082:	d901      	bls.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e0db      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003088:	4b70      	ldr	r3, [pc, #448]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003090:	2b00      	cmp	r3, #0
 8003092:	d0f0      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003094:	4b6c      	ldr	r3, [pc, #432]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003096:	6a1b      	ldr	r3, [r3, #32]
 8003098:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800309c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800309e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d07d      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030ac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d076      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030b2:	4b65      	ldr	r3, [pc, #404]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80030bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80030c0:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030c4:	fa93 f3a3 	rbit	r3, r3
 80030c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80030ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80030cc:	fab3 f383 	clz	r3, r3
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	461a      	mov	r2, r3
 80030d4:	4b5e      	ldr	r3, [pc, #376]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80030d6:	4413      	add	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	461a      	mov	r2, r3
 80030dc:	2301      	movs	r3, #1
 80030de:	6013      	str	r3, [r2, #0]
 80030e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80030e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030e8:	fa93 f3a3 	rbit	r3, r3
 80030ec:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80030ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80030f0:	fab3 f383 	clz	r3, r3
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	461a      	mov	r2, r3
 80030f8:	4b55      	ldr	r3, [pc, #340]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80030fa:	4413      	add	r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	461a      	mov	r2, r3
 8003100:	2300      	movs	r3, #0
 8003102:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003104:	4a50      	ldr	r2, [pc, #320]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003106:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003108:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800310a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800310c:	f003 0301 	and.w	r3, r3, #1
 8003110:	2b00      	cmp	r3, #0
 8003112:	d045      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003114:	f7fe f8ae 	bl	8001274 <HAL_GetTick>
 8003118:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800311a:	e00a      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800311c:	f7fe f8aa 	bl	8001274 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	f241 3288 	movw	r2, #5000	@ 0x1388
 800312a:	4293      	cmp	r3, r2
 800312c:	d901      	bls.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e086      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003132:	2302      	movs	r3, #2
 8003134:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003138:	fa93 f3a3 	rbit	r3, r3
 800313c:	627b      	str	r3, [r7, #36]	@ 0x24
 800313e:	2302      	movs	r3, #2
 8003140:	623b      	str	r3, [r7, #32]
 8003142:	6a3b      	ldr	r3, [r7, #32]
 8003144:	fa93 f3a3 	rbit	r3, r3
 8003148:	61fb      	str	r3, [r7, #28]
  return result;
 800314a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800314c:	fab3 f383 	clz	r3, r3
 8003150:	b2db      	uxtb	r3, r3
 8003152:	095b      	lsrs	r3, r3, #5
 8003154:	b2db      	uxtb	r3, r3
 8003156:	f043 0302 	orr.w	r3, r3, #2
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b02      	cmp	r3, #2
 800315e:	d102      	bne.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003160:	4b39      	ldr	r3, [pc, #228]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003162:	6a1b      	ldr	r3, [r3, #32]
 8003164:	e007      	b.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003166:	2302      	movs	r3, #2
 8003168:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	fa93 f3a3 	rbit	r3, r3
 8003170:	617b      	str	r3, [r7, #20]
 8003172:	4b35      	ldr	r3, [pc, #212]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003176:	2202      	movs	r2, #2
 8003178:	613a      	str	r2, [r7, #16]
 800317a:	693a      	ldr	r2, [r7, #16]
 800317c:	fa92 f2a2 	rbit	r2, r2
 8003180:	60fa      	str	r2, [r7, #12]
  return result;
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	fab2 f282 	clz	r2, r2
 8003188:	b2d2      	uxtb	r2, r2
 800318a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800318e:	b2d2      	uxtb	r2, r2
 8003190:	f002 021f 	and.w	r2, r2, #31
 8003194:	2101      	movs	r1, #1
 8003196:	fa01 f202 	lsl.w	r2, r1, r2
 800319a:	4013      	ands	r3, r2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d0bd      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80031a0:	4b29      	ldr	r3, [pc, #164]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031a2:	6a1b      	ldr	r3, [r3, #32]
 80031a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	4926      	ldr	r1, [pc, #152]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80031b2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d105      	bne.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ba:	4b23      	ldr	r3, [pc, #140]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	4a22      	ldr	r2, [pc, #136]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031c4:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d008      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031d2:	4b1d      	ldr	r3, [pc, #116]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031d6:	f023 0203 	bic.w	r2, r3, #3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	491a      	ldr	r1, [pc, #104]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0320 	and.w	r3, r3, #32
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d008      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031f0:	4b15      	ldr	r3, [pc, #84]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f4:	f023 0210 	bic.w	r2, r3, #16
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	4912      	ldr	r1, [pc, #72]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800320a:	2b00      	cmp	r3, #0
 800320c:	d008      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800320e:	4b0e      	ldr	r3, [pc, #56]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003212:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	490b      	ldr	r1, [pc, #44]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800321c:	4313      	orrs	r3, r2
 800321e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d008      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800322c:	4b06      	ldr	r3, [pc, #24]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800322e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003230:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	695b      	ldr	r3, [r3, #20]
 8003238:	4903      	ldr	r1, [pc, #12]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800323a:	4313      	orrs	r3, r2
 800323c:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	3748      	adds	r7, #72	@ 0x48
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	40021000 	.word	0x40021000
 800324c:	40007000 	.word	0x40007000
 8003250:	10908100 	.word	0x10908100

08003254 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e049      	b.n	80032fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800326c:	b2db      	uxtb	r3, r3
 800326e:	2b00      	cmp	r3, #0
 8003270:	d106      	bne.n	8003280 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f7fd fe02 	bl	8000e84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2202      	movs	r2, #2
 8003284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	3304      	adds	r3, #4
 8003290:	4619      	mov	r1, r3
 8003292:	4610      	mov	r0, r2
 8003294:	f000 fb60 	bl	8003958 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3708      	adds	r7, #8
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}

08003302 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003302:	b580      	push	{r7, lr}
 8003304:	b082      	sub	sp, #8
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d101      	bne.n	8003314 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e049      	b.n	80033a8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800331a:	b2db      	uxtb	r3, r3
 800331c:	2b00      	cmp	r3, #0
 800331e:	d106      	bne.n	800332e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 f841 	bl	80033b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2202      	movs	r2, #2
 8003332:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	3304      	adds	r3, #4
 800333e:	4619      	mov	r1, r3
 8003340:	4610      	mov	r0, r2
 8003342:	f000 fb09 	bl	8003958 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2201      	movs	r2, #1
 800334a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2201      	movs	r2, #1
 8003352:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2201      	movs	r2, #1
 800335a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2201      	movs	r2, #1
 8003362:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2201      	movs	r2, #1
 800337a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2201      	movs	r2, #1
 8003382:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2201      	movs	r2, #1
 800338a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2201      	movs	r2, #1
 8003392:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2201      	movs	r2, #1
 800339a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2201      	movs	r2, #1
 80033a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3708      	adds	r7, #8
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d109      	bne.n	80033e8 <HAL_TIM_PWM_Start+0x24>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b01      	cmp	r3, #1
 80033de:	bf14      	ite	ne
 80033e0:	2301      	movne	r3, #1
 80033e2:	2300      	moveq	r3, #0
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	e03c      	b.n	8003462 <HAL_TIM_PWM_Start+0x9e>
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	2b04      	cmp	r3, #4
 80033ec:	d109      	bne.n	8003402 <HAL_TIM_PWM_Start+0x3e>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	bf14      	ite	ne
 80033fa:	2301      	movne	r3, #1
 80033fc:	2300      	moveq	r3, #0
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	e02f      	b.n	8003462 <HAL_TIM_PWM_Start+0x9e>
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	2b08      	cmp	r3, #8
 8003406:	d109      	bne.n	800341c <HAL_TIM_PWM_Start+0x58>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800340e:	b2db      	uxtb	r3, r3
 8003410:	2b01      	cmp	r3, #1
 8003412:	bf14      	ite	ne
 8003414:	2301      	movne	r3, #1
 8003416:	2300      	moveq	r3, #0
 8003418:	b2db      	uxtb	r3, r3
 800341a:	e022      	b.n	8003462 <HAL_TIM_PWM_Start+0x9e>
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	2b0c      	cmp	r3, #12
 8003420:	d109      	bne.n	8003436 <HAL_TIM_PWM_Start+0x72>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b01      	cmp	r3, #1
 800342c:	bf14      	ite	ne
 800342e:	2301      	movne	r3, #1
 8003430:	2300      	moveq	r3, #0
 8003432:	b2db      	uxtb	r3, r3
 8003434:	e015      	b.n	8003462 <HAL_TIM_PWM_Start+0x9e>
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	2b10      	cmp	r3, #16
 800343a:	d109      	bne.n	8003450 <HAL_TIM_PWM_Start+0x8c>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003442:	b2db      	uxtb	r3, r3
 8003444:	2b01      	cmp	r3, #1
 8003446:	bf14      	ite	ne
 8003448:	2301      	movne	r3, #1
 800344a:	2300      	moveq	r3, #0
 800344c:	b2db      	uxtb	r3, r3
 800344e:	e008      	b.n	8003462 <HAL_TIM_PWM_Start+0x9e>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003456:	b2db      	uxtb	r3, r3
 8003458:	2b01      	cmp	r3, #1
 800345a:	bf14      	ite	ne
 800345c:	2301      	movne	r3, #1
 800345e:	2300      	moveq	r3, #0
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d001      	beq.n	800346a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e088      	b.n	800357c <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d104      	bne.n	800347a <HAL_TIM_PWM_Start+0xb6>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2202      	movs	r2, #2
 8003474:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003478:	e023      	b.n	80034c2 <HAL_TIM_PWM_Start+0xfe>
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	2b04      	cmp	r3, #4
 800347e:	d104      	bne.n	800348a <HAL_TIM_PWM_Start+0xc6>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2202      	movs	r2, #2
 8003484:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003488:	e01b      	b.n	80034c2 <HAL_TIM_PWM_Start+0xfe>
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	2b08      	cmp	r3, #8
 800348e:	d104      	bne.n	800349a <HAL_TIM_PWM_Start+0xd6>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2202      	movs	r2, #2
 8003494:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003498:	e013      	b.n	80034c2 <HAL_TIM_PWM_Start+0xfe>
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	2b0c      	cmp	r3, #12
 800349e:	d104      	bne.n	80034aa <HAL_TIM_PWM_Start+0xe6>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2202      	movs	r2, #2
 80034a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80034a8:	e00b      	b.n	80034c2 <HAL_TIM_PWM_Start+0xfe>
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	2b10      	cmp	r3, #16
 80034ae:	d104      	bne.n	80034ba <HAL_TIM_PWM_Start+0xf6>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2202      	movs	r2, #2
 80034b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034b8:	e003      	b.n	80034c2 <HAL_TIM_PWM_Start+0xfe>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2202      	movs	r2, #2
 80034be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2201      	movs	r2, #1
 80034c8:	6839      	ldr	r1, [r7, #0]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f000 fe08 	bl	80040e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a2b      	ldr	r2, [pc, #172]	@ (8003584 <HAL_TIM_PWM_Start+0x1c0>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d00e      	beq.n	80034f8 <HAL_TIM_PWM_Start+0x134>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a2a      	ldr	r2, [pc, #168]	@ (8003588 <HAL_TIM_PWM_Start+0x1c4>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d009      	beq.n	80034f8 <HAL_TIM_PWM_Start+0x134>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a28      	ldr	r2, [pc, #160]	@ (800358c <HAL_TIM_PWM_Start+0x1c8>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d004      	beq.n	80034f8 <HAL_TIM_PWM_Start+0x134>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a27      	ldr	r2, [pc, #156]	@ (8003590 <HAL_TIM_PWM_Start+0x1cc>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d101      	bne.n	80034fc <HAL_TIM_PWM_Start+0x138>
 80034f8:	2301      	movs	r3, #1
 80034fa:	e000      	b.n	80034fe <HAL_TIM_PWM_Start+0x13a>
 80034fc:	2300      	movs	r3, #0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d007      	beq.n	8003512 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003510:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a1b      	ldr	r2, [pc, #108]	@ (8003584 <HAL_TIM_PWM_Start+0x1c0>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d00e      	beq.n	800353a <HAL_TIM_PWM_Start+0x176>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003524:	d009      	beq.n	800353a <HAL_TIM_PWM_Start+0x176>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a1a      	ldr	r2, [pc, #104]	@ (8003594 <HAL_TIM_PWM_Start+0x1d0>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d004      	beq.n	800353a <HAL_TIM_PWM_Start+0x176>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a14      	ldr	r2, [pc, #80]	@ (8003588 <HAL_TIM_PWM_Start+0x1c4>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d115      	bne.n	8003566 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	689a      	ldr	r2, [r3, #8]
 8003540:	4b15      	ldr	r3, [pc, #84]	@ (8003598 <HAL_TIM_PWM_Start+0x1d4>)
 8003542:	4013      	ands	r3, r2
 8003544:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2b06      	cmp	r3, #6
 800354a:	d015      	beq.n	8003578 <HAL_TIM_PWM_Start+0x1b4>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003552:	d011      	beq.n	8003578 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f042 0201 	orr.w	r2, r2, #1
 8003562:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003564:	e008      	b.n	8003578 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f042 0201 	orr.w	r2, r2, #1
 8003574:	601a      	str	r2, [r3, #0]
 8003576:	e000      	b.n	800357a <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003578:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3710      	adds	r7, #16
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	40012c00 	.word	0x40012c00
 8003588:	40014000 	.word	0x40014000
 800358c:	40014400 	.word	0x40014400
 8003590:	40014800 	.word	0x40014800
 8003594:	40000400 	.word	0x40000400
 8003598:	00010007 	.word	0x00010007

0800359c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b086      	sub	sp, #24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035a8:	2300      	movs	r3, #0
 80035aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d101      	bne.n	80035ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80035b6:	2302      	movs	r3, #2
 80035b8:	e0ff      	b.n	80037ba <HAL_TIM_PWM_ConfigChannel+0x21e>
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2b14      	cmp	r3, #20
 80035c6:	f200 80f0 	bhi.w	80037aa <HAL_TIM_PWM_ConfigChannel+0x20e>
 80035ca:	a201      	add	r2, pc, #4	@ (adr r2, 80035d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80035cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035d0:	08003625 	.word	0x08003625
 80035d4:	080037ab 	.word	0x080037ab
 80035d8:	080037ab 	.word	0x080037ab
 80035dc:	080037ab 	.word	0x080037ab
 80035e0:	08003665 	.word	0x08003665
 80035e4:	080037ab 	.word	0x080037ab
 80035e8:	080037ab 	.word	0x080037ab
 80035ec:	080037ab 	.word	0x080037ab
 80035f0:	080036a7 	.word	0x080036a7
 80035f4:	080037ab 	.word	0x080037ab
 80035f8:	080037ab 	.word	0x080037ab
 80035fc:	080037ab 	.word	0x080037ab
 8003600:	080036e7 	.word	0x080036e7
 8003604:	080037ab 	.word	0x080037ab
 8003608:	080037ab 	.word	0x080037ab
 800360c:	080037ab 	.word	0x080037ab
 8003610:	08003729 	.word	0x08003729
 8003614:	080037ab 	.word	0x080037ab
 8003618:	080037ab 	.word	0x080037ab
 800361c:	080037ab 	.word	0x080037ab
 8003620:	08003769 	.word	0x08003769
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68b9      	ldr	r1, [r7, #8]
 800362a:	4618      	mov	r0, r3
 800362c:	f000 fa18 	bl	8003a60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	699a      	ldr	r2, [r3, #24]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f042 0208 	orr.w	r2, r2, #8
 800363e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	699a      	ldr	r2, [r3, #24]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f022 0204 	bic.w	r2, r2, #4
 800364e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	6999      	ldr	r1, [r3, #24]
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	691a      	ldr	r2, [r3, #16]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	430a      	orrs	r2, r1
 8003660:	619a      	str	r2, [r3, #24]
      break;
 8003662:	e0a5      	b.n	80037b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68b9      	ldr	r1, [r7, #8]
 800366a:	4618      	mov	r0, r3
 800366c:	f000 fa7e 	bl	8003b6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	699a      	ldr	r2, [r3, #24]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800367e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	699a      	ldr	r2, [r3, #24]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800368e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	6999      	ldr	r1, [r3, #24]
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	021a      	lsls	r2, r3, #8
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	430a      	orrs	r2, r1
 80036a2:	619a      	str	r2, [r3, #24]
      break;
 80036a4:	e084      	b.n	80037b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68b9      	ldr	r1, [r7, #8]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f000 fadd 	bl	8003c6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	69da      	ldr	r2, [r3, #28]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f042 0208 	orr.w	r2, r2, #8
 80036c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	69da      	ldr	r2, [r3, #28]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 0204 	bic.w	r2, r2, #4
 80036d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	69d9      	ldr	r1, [r3, #28]
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	691a      	ldr	r2, [r3, #16]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	430a      	orrs	r2, r1
 80036e2:	61da      	str	r2, [r3, #28]
      break;
 80036e4:	e064      	b.n	80037b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68b9      	ldr	r1, [r7, #8]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f000 fb3b 	bl	8003d68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	69da      	ldr	r2, [r3, #28]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003700:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	69da      	ldr	r2, [r3, #28]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003710:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	69d9      	ldr	r1, [r3, #28]
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	691b      	ldr	r3, [r3, #16]
 800371c:	021a      	lsls	r2, r3, #8
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	430a      	orrs	r2, r1
 8003724:	61da      	str	r2, [r3, #28]
      break;
 8003726:	e043      	b.n	80037b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68b9      	ldr	r1, [r7, #8]
 800372e:	4618      	mov	r0, r3
 8003730:	f000 fb7e 	bl	8003e30 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f042 0208 	orr.w	r2, r2, #8
 8003742:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 0204 	bic.w	r2, r2, #4
 8003752:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	691a      	ldr	r2, [r3, #16]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	430a      	orrs	r2, r1
 8003764:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003766:	e023      	b.n	80037b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68b9      	ldr	r1, [r7, #8]
 800376e:	4618      	mov	r0, r3
 8003770:	f000 fbbc 	bl	8003eec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003782:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003792:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	021a      	lsls	r2, r3, #8
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	430a      	orrs	r2, r1
 80037a6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80037a8:	e002      	b.n	80037b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	75fb      	strb	r3, [r7, #23]
      break;
 80037ae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80037b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3718      	adds	r7, #24
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop

080037c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037ce:	2300      	movs	r3, #0
 80037d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d101      	bne.n	80037e0 <HAL_TIM_ConfigClockSource+0x1c>
 80037dc:	2302      	movs	r3, #2
 80037de:	e0b6      	b.n	800394e <HAL_TIM_ConfigClockSource+0x18a>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2202      	movs	r2, #2
 80037ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037fe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003802:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800380a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68ba      	ldr	r2, [r7, #8]
 8003812:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800381c:	d03e      	beq.n	800389c <HAL_TIM_ConfigClockSource+0xd8>
 800381e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003822:	f200 8087 	bhi.w	8003934 <HAL_TIM_ConfigClockSource+0x170>
 8003826:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800382a:	f000 8086 	beq.w	800393a <HAL_TIM_ConfigClockSource+0x176>
 800382e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003832:	d87f      	bhi.n	8003934 <HAL_TIM_ConfigClockSource+0x170>
 8003834:	2b70      	cmp	r3, #112	@ 0x70
 8003836:	d01a      	beq.n	800386e <HAL_TIM_ConfigClockSource+0xaa>
 8003838:	2b70      	cmp	r3, #112	@ 0x70
 800383a:	d87b      	bhi.n	8003934 <HAL_TIM_ConfigClockSource+0x170>
 800383c:	2b60      	cmp	r3, #96	@ 0x60
 800383e:	d050      	beq.n	80038e2 <HAL_TIM_ConfigClockSource+0x11e>
 8003840:	2b60      	cmp	r3, #96	@ 0x60
 8003842:	d877      	bhi.n	8003934 <HAL_TIM_ConfigClockSource+0x170>
 8003844:	2b50      	cmp	r3, #80	@ 0x50
 8003846:	d03c      	beq.n	80038c2 <HAL_TIM_ConfigClockSource+0xfe>
 8003848:	2b50      	cmp	r3, #80	@ 0x50
 800384a:	d873      	bhi.n	8003934 <HAL_TIM_ConfigClockSource+0x170>
 800384c:	2b40      	cmp	r3, #64	@ 0x40
 800384e:	d058      	beq.n	8003902 <HAL_TIM_ConfigClockSource+0x13e>
 8003850:	2b40      	cmp	r3, #64	@ 0x40
 8003852:	d86f      	bhi.n	8003934 <HAL_TIM_ConfigClockSource+0x170>
 8003854:	2b30      	cmp	r3, #48	@ 0x30
 8003856:	d064      	beq.n	8003922 <HAL_TIM_ConfigClockSource+0x15e>
 8003858:	2b30      	cmp	r3, #48	@ 0x30
 800385a:	d86b      	bhi.n	8003934 <HAL_TIM_ConfigClockSource+0x170>
 800385c:	2b20      	cmp	r3, #32
 800385e:	d060      	beq.n	8003922 <HAL_TIM_ConfigClockSource+0x15e>
 8003860:	2b20      	cmp	r3, #32
 8003862:	d867      	bhi.n	8003934 <HAL_TIM_ConfigClockSource+0x170>
 8003864:	2b00      	cmp	r3, #0
 8003866:	d05c      	beq.n	8003922 <HAL_TIM_ConfigClockSource+0x15e>
 8003868:	2b10      	cmp	r3, #16
 800386a:	d05a      	beq.n	8003922 <HAL_TIM_ConfigClockSource+0x15e>
 800386c:	e062      	b.n	8003934 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800387e:	f000 fc0f 	bl	80040a0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003890:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68ba      	ldr	r2, [r7, #8]
 8003898:	609a      	str	r2, [r3, #8]
      break;
 800389a:	e04f      	b.n	800393c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038ac:	f000 fbf8 	bl	80040a0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	689a      	ldr	r2, [r3, #8]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80038be:	609a      	str	r2, [r3, #8]
      break;
 80038c0:	e03c      	b.n	800393c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038ce:	461a      	mov	r2, r3
 80038d0:	f000 fb6c 	bl	8003fac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2150      	movs	r1, #80	@ 0x50
 80038da:	4618      	mov	r0, r3
 80038dc:	f000 fbc5 	bl	800406a <TIM_ITRx_SetConfig>
      break;
 80038e0:	e02c      	b.n	800393c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038ee:	461a      	mov	r2, r3
 80038f0:	f000 fb8b 	bl	800400a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2160      	movs	r1, #96	@ 0x60
 80038fa:	4618      	mov	r0, r3
 80038fc:	f000 fbb5 	bl	800406a <TIM_ITRx_SetConfig>
      break;
 8003900:	e01c      	b.n	800393c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800390e:	461a      	mov	r2, r3
 8003910:	f000 fb4c 	bl	8003fac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2140      	movs	r1, #64	@ 0x40
 800391a:	4618      	mov	r0, r3
 800391c:	f000 fba5 	bl	800406a <TIM_ITRx_SetConfig>
      break;
 8003920:	e00c      	b.n	800393c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4619      	mov	r1, r3
 800392c:	4610      	mov	r0, r2
 800392e:	f000 fb9c 	bl	800406a <TIM_ITRx_SetConfig>
      break;
 8003932:	e003      	b.n	800393c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	73fb      	strb	r3, [r7, #15]
      break;
 8003938:	e000      	b.n	800393c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800393a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800394c:	7bfb      	ldrb	r3, [r7, #15]
}
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
	...

08003958 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003958:	b480      	push	{r7}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a38      	ldr	r2, [pc, #224]	@ (8003a4c <TIM_Base_SetConfig+0xf4>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d007      	beq.n	8003980 <TIM_Base_SetConfig+0x28>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003976:	d003      	beq.n	8003980 <TIM_Base_SetConfig+0x28>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a35      	ldr	r2, [pc, #212]	@ (8003a50 <TIM_Base_SetConfig+0xf8>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d108      	bne.n	8003992 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003986:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	4313      	orrs	r3, r2
 8003990:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a2d      	ldr	r2, [pc, #180]	@ (8003a4c <TIM_Base_SetConfig+0xf4>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d013      	beq.n	80039c2 <TIM_Base_SetConfig+0x6a>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039a0:	d00f      	beq.n	80039c2 <TIM_Base_SetConfig+0x6a>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a2a      	ldr	r2, [pc, #168]	@ (8003a50 <TIM_Base_SetConfig+0xf8>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d00b      	beq.n	80039c2 <TIM_Base_SetConfig+0x6a>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a29      	ldr	r2, [pc, #164]	@ (8003a54 <TIM_Base_SetConfig+0xfc>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d007      	beq.n	80039c2 <TIM_Base_SetConfig+0x6a>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a28      	ldr	r2, [pc, #160]	@ (8003a58 <TIM_Base_SetConfig+0x100>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d003      	beq.n	80039c2 <TIM_Base_SetConfig+0x6a>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a27      	ldr	r2, [pc, #156]	@ (8003a5c <TIM_Base_SetConfig+0x104>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d108      	bne.n	80039d4 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	4313      	orrs	r3, r2
 80039e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	689a      	ldr	r2, [r3, #8]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a14      	ldr	r2, [pc, #80]	@ (8003a4c <TIM_Base_SetConfig+0xf4>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d00b      	beq.n	8003a18 <TIM_Base_SetConfig+0xc0>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a14      	ldr	r2, [pc, #80]	@ (8003a54 <TIM_Base_SetConfig+0xfc>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d007      	beq.n	8003a18 <TIM_Base_SetConfig+0xc0>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a13      	ldr	r2, [pc, #76]	@ (8003a58 <TIM_Base_SetConfig+0x100>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d003      	beq.n	8003a18 <TIM_Base_SetConfig+0xc0>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a12      	ldr	r2, [pc, #72]	@ (8003a5c <TIM_Base_SetConfig+0x104>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d103      	bne.n	8003a20 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	691a      	ldr	r2, [r3, #16]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d105      	bne.n	8003a3e <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	f023 0201 	bic.w	r2, r3, #1
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	611a      	str	r2, [r3, #16]
  }
}
 8003a3e:	bf00      	nop
 8003a40:	3714      	adds	r7, #20
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	40012c00 	.word	0x40012c00
 8003a50:	40000400 	.word	0x40000400
 8003a54:	40014000 	.word	0x40014000
 8003a58:	40014400 	.word	0x40014400
 8003a5c:	40014800 	.word	0x40014800

08003a60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b087      	sub	sp, #28
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a1b      	ldr	r3, [r3, #32]
 8003a74:	f023 0201 	bic.w	r2, r3, #1
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f023 0303 	bic.w	r3, r3, #3
 8003a9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68fa      	ldr	r2, [r7, #12]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	f023 0302 	bic.w	r3, r3, #2
 8003aac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a28      	ldr	r2, [pc, #160]	@ (8003b5c <TIM_OC1_SetConfig+0xfc>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d00b      	beq.n	8003ad8 <TIM_OC1_SetConfig+0x78>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a27      	ldr	r2, [pc, #156]	@ (8003b60 <TIM_OC1_SetConfig+0x100>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d007      	beq.n	8003ad8 <TIM_OC1_SetConfig+0x78>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a26      	ldr	r2, [pc, #152]	@ (8003b64 <TIM_OC1_SetConfig+0x104>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d003      	beq.n	8003ad8 <TIM_OC1_SetConfig+0x78>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a25      	ldr	r2, [pc, #148]	@ (8003b68 <TIM_OC1_SetConfig+0x108>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d10c      	bne.n	8003af2 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	f023 0308 	bic.w	r3, r3, #8
 8003ade:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	697a      	ldr	r2, [r7, #20]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	f023 0304 	bic.w	r3, r3, #4
 8003af0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a19      	ldr	r2, [pc, #100]	@ (8003b5c <TIM_OC1_SetConfig+0xfc>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d00b      	beq.n	8003b12 <TIM_OC1_SetConfig+0xb2>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a18      	ldr	r2, [pc, #96]	@ (8003b60 <TIM_OC1_SetConfig+0x100>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d007      	beq.n	8003b12 <TIM_OC1_SetConfig+0xb2>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a17      	ldr	r2, [pc, #92]	@ (8003b64 <TIM_OC1_SetConfig+0x104>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d003      	beq.n	8003b12 <TIM_OC1_SetConfig+0xb2>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a16      	ldr	r2, [pc, #88]	@ (8003b68 <TIM_OC1_SetConfig+0x108>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d111      	bne.n	8003b36 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003b20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	699b      	ldr	r3, [r3, #24]
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	685a      	ldr	r2, [r3, #4]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	621a      	str	r2, [r3, #32]
}
 8003b50:	bf00      	nop
 8003b52:	371c      	adds	r7, #28
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr
 8003b5c:	40012c00 	.word	0x40012c00
 8003b60:	40014000 	.word	0x40014000
 8003b64:	40014400 	.word	0x40014400
 8003b68:	40014800 	.word	0x40014800

08003b6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b087      	sub	sp, #28
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a1b      	ldr	r3, [r3, #32]
 8003b80:	f023 0210 	bic.w	r2, r3, #16
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ba6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	021b      	lsls	r3, r3, #8
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	f023 0320 	bic.w	r3, r3, #32
 8003bba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	011b      	lsls	r3, r3, #4
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a24      	ldr	r2, [pc, #144]	@ (8003c5c <TIM_OC2_SetConfig+0xf0>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d10d      	bne.n	8003bec <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003bd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	011b      	lsls	r3, r3, #4
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003bea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a1b      	ldr	r2, [pc, #108]	@ (8003c5c <TIM_OC2_SetConfig+0xf0>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d00b      	beq.n	8003c0c <TIM_OC2_SetConfig+0xa0>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a1a      	ldr	r2, [pc, #104]	@ (8003c60 <TIM_OC2_SetConfig+0xf4>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d007      	beq.n	8003c0c <TIM_OC2_SetConfig+0xa0>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4a19      	ldr	r2, [pc, #100]	@ (8003c64 <TIM_OC2_SetConfig+0xf8>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d003      	beq.n	8003c0c <TIM_OC2_SetConfig+0xa0>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4a18      	ldr	r2, [pc, #96]	@ (8003c68 <TIM_OC2_SetConfig+0xfc>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d113      	bne.n	8003c34 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003c12:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003c1a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	695b      	ldr	r3, [r3, #20]
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	685a      	ldr	r2, [r3, #4]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	697a      	ldr	r2, [r7, #20]
 8003c4c:	621a      	str	r2, [r3, #32]
}
 8003c4e:	bf00      	nop
 8003c50:	371c      	adds	r7, #28
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr
 8003c5a:	bf00      	nop
 8003c5c:	40012c00 	.word	0x40012c00
 8003c60:	40014000 	.word	0x40014000
 8003c64:	40014400 	.word	0x40014400
 8003c68:	40014800 	.word	0x40014800

08003c6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b087      	sub	sp, #28
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a1b      	ldr	r3, [r3, #32]
 8003c7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a1b      	ldr	r3, [r3, #32]
 8003c80:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	69db      	ldr	r3, [r3, #28]
 8003c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f023 0303 	bic.w	r3, r3, #3
 8003ca6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68fa      	ldr	r2, [r7, #12]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003cb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	021b      	lsls	r3, r3, #8
 8003cc0:	697a      	ldr	r2, [r7, #20]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a23      	ldr	r2, [pc, #140]	@ (8003d58 <TIM_OC3_SetConfig+0xec>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d10d      	bne.n	8003cea <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003cd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	021b      	lsls	r3, r3, #8
 8003cdc:	697a      	ldr	r2, [r7, #20]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003ce8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a1a      	ldr	r2, [pc, #104]	@ (8003d58 <TIM_OC3_SetConfig+0xec>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d00b      	beq.n	8003d0a <TIM_OC3_SetConfig+0x9e>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a19      	ldr	r2, [pc, #100]	@ (8003d5c <TIM_OC3_SetConfig+0xf0>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d007      	beq.n	8003d0a <TIM_OC3_SetConfig+0x9e>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a18      	ldr	r2, [pc, #96]	@ (8003d60 <TIM_OC3_SetConfig+0xf4>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d003      	beq.n	8003d0a <TIM_OC3_SetConfig+0x9e>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a17      	ldr	r2, [pc, #92]	@ (8003d64 <TIM_OC3_SetConfig+0xf8>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d113      	bne.n	8003d32 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003d18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	011b      	lsls	r3, r3, #4
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	011b      	lsls	r3, r3, #4
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	68fa      	ldr	r2, [r7, #12]
 8003d3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	685a      	ldr	r2, [r3, #4]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	697a      	ldr	r2, [r7, #20]
 8003d4a:	621a      	str	r2, [r3, #32]
}
 8003d4c:	bf00      	nop
 8003d4e:	371c      	adds	r7, #28
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr
 8003d58:	40012c00 	.word	0x40012c00
 8003d5c:	40014000 	.word	0x40014000
 8003d60:	40014400 	.word	0x40014400
 8003d64:	40014800 	.word	0x40014800

08003d68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b087      	sub	sp, #28
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a1b      	ldr	r3, [r3, #32]
 8003d76:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a1b      	ldr	r3, [r3, #32]
 8003d7c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	69db      	ldr	r3, [r3, #28]
 8003d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003da2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	021b      	lsls	r3, r3, #8
 8003daa:	68fa      	ldr	r2, [r7, #12]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003db6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	031b      	lsls	r3, r3, #12
 8003dbe:	693a      	ldr	r2, [r7, #16]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a16      	ldr	r2, [pc, #88]	@ (8003e20 <TIM_OC4_SetConfig+0xb8>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d00b      	beq.n	8003de4 <TIM_OC4_SetConfig+0x7c>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a15      	ldr	r2, [pc, #84]	@ (8003e24 <TIM_OC4_SetConfig+0xbc>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d007      	beq.n	8003de4 <TIM_OC4_SetConfig+0x7c>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a14      	ldr	r2, [pc, #80]	@ (8003e28 <TIM_OC4_SetConfig+0xc0>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d003      	beq.n	8003de4 <TIM_OC4_SetConfig+0x7c>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a13      	ldr	r2, [pc, #76]	@ (8003e2c <TIM_OC4_SetConfig+0xc4>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d109      	bne.n	8003df8 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003dea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	695b      	ldr	r3, [r3, #20]
 8003df0:	019b      	lsls	r3, r3, #6
 8003df2:	697a      	ldr	r2, [r7, #20]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	697a      	ldr	r2, [r7, #20]
 8003dfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	685a      	ldr	r2, [r3, #4]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	693a      	ldr	r2, [r7, #16]
 8003e10:	621a      	str	r2, [r3, #32]
}
 8003e12:	bf00      	nop
 8003e14:	371c      	adds	r7, #28
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	40012c00 	.word	0x40012c00
 8003e24:	40014000 	.word	0x40014000
 8003e28:	40014400 	.word	0x40014400
 8003e2c:	40014800 	.word	0x40014800

08003e30 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b087      	sub	sp, #28
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
 8003e3e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a1b      	ldr	r3, [r3, #32]
 8003e44:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003e74:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	041b      	lsls	r3, r3, #16
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a15      	ldr	r2, [pc, #84]	@ (8003edc <TIM_OC5_SetConfig+0xac>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d00b      	beq.n	8003ea2 <TIM_OC5_SetConfig+0x72>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a14      	ldr	r2, [pc, #80]	@ (8003ee0 <TIM_OC5_SetConfig+0xb0>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d007      	beq.n	8003ea2 <TIM_OC5_SetConfig+0x72>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a13      	ldr	r2, [pc, #76]	@ (8003ee4 <TIM_OC5_SetConfig+0xb4>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d003      	beq.n	8003ea2 <TIM_OC5_SetConfig+0x72>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a12      	ldr	r2, [pc, #72]	@ (8003ee8 <TIM_OC5_SetConfig+0xb8>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d109      	bne.n	8003eb6 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ea8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	021b      	lsls	r3, r3, #8
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	697a      	ldr	r2, [r7, #20]
 8003eba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	685a      	ldr	r2, [r3, #4]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	621a      	str	r2, [r3, #32]
}
 8003ed0:	bf00      	nop
 8003ed2:	371c      	adds	r7, #28
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr
 8003edc:	40012c00 	.word	0x40012c00
 8003ee0:	40014000 	.word	0x40014000
 8003ee4:	40014400 	.word	0x40014400
 8003ee8:	40014800 	.word	0x40014800

08003eec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b087      	sub	sp, #28
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a1b      	ldr	r3, [r3, #32]
 8003f00:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	021b      	lsls	r3, r3, #8
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003f32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	051b      	lsls	r3, r3, #20
 8003f3a:	693a      	ldr	r2, [r7, #16]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a16      	ldr	r2, [pc, #88]	@ (8003f9c <TIM_OC6_SetConfig+0xb0>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d00b      	beq.n	8003f60 <TIM_OC6_SetConfig+0x74>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a15      	ldr	r2, [pc, #84]	@ (8003fa0 <TIM_OC6_SetConfig+0xb4>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d007      	beq.n	8003f60 <TIM_OC6_SetConfig+0x74>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a14      	ldr	r2, [pc, #80]	@ (8003fa4 <TIM_OC6_SetConfig+0xb8>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d003      	beq.n	8003f60 <TIM_OC6_SetConfig+0x74>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a13      	ldr	r2, [pc, #76]	@ (8003fa8 <TIM_OC6_SetConfig+0xbc>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d109      	bne.n	8003f74 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f66:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	695b      	ldr	r3, [r3, #20]
 8003f6c:	029b      	lsls	r3, r3, #10
 8003f6e:	697a      	ldr	r2, [r7, #20]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	697a      	ldr	r2, [r7, #20]
 8003f78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	685a      	ldr	r2, [r3, #4]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	693a      	ldr	r2, [r7, #16]
 8003f8c:	621a      	str	r2, [r3, #32]
}
 8003f8e:	bf00      	nop
 8003f90:	371c      	adds	r7, #28
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	40012c00 	.word	0x40012c00
 8003fa0:	40014000 	.word	0x40014000
 8003fa4:	40014400 	.word	0x40014400
 8003fa8:	40014800 	.word	0x40014800

08003fac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b087      	sub	sp, #28
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6a1b      	ldr	r3, [r3, #32]
 8003fbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
 8003fc2:	f023 0201 	bic.w	r2, r3, #1
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	699b      	ldr	r3, [r3, #24]
 8003fce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003fd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	011b      	lsls	r3, r3, #4
 8003fdc:	693a      	ldr	r2, [r7, #16]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	f023 030a 	bic.w	r3, r3, #10
 8003fe8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	621a      	str	r2, [r3, #32]
}
 8003ffe:	bf00      	nop
 8004000:	371c      	adds	r7, #28
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr

0800400a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800400a:	b480      	push	{r7}
 800400c:	b087      	sub	sp, #28
 800400e:	af00      	add	r7, sp, #0
 8004010:	60f8      	str	r0, [r7, #12]
 8004012:	60b9      	str	r1, [r7, #8]
 8004014:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6a1b      	ldr	r3, [r3, #32]
 8004020:	f023 0210 	bic.w	r2, r3, #16
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004034:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	031b      	lsls	r3, r3, #12
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	4313      	orrs	r3, r2
 800403e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004046:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	011b      	lsls	r3, r3, #4
 800404c:	697a      	ldr	r2, [r7, #20]
 800404e:	4313      	orrs	r3, r2
 8004050:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	621a      	str	r2, [r3, #32]
}
 800405e:	bf00      	nop
 8004060:	371c      	adds	r7, #28
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr

0800406a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800406a:	b480      	push	{r7}
 800406c:	b085      	sub	sp, #20
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
 8004072:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004080:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	4313      	orrs	r3, r2
 8004088:	f043 0307 	orr.w	r3, r3, #7
 800408c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	609a      	str	r2, [r3, #8]
}
 8004094:	bf00      	nop
 8004096:	3714      	adds	r7, #20
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b087      	sub	sp, #28
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	607a      	str	r2, [r7, #4]
 80040ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80040ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	021a      	lsls	r2, r3, #8
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	431a      	orrs	r2, r3
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	609a      	str	r2, [r3, #8]
}
 80040d4:	bf00      	nop
 80040d6:	371c      	adds	r7, #28
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b087      	sub	sp, #28
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	f003 031f 	and.w	r3, r3, #31
 80040f2:	2201      	movs	r2, #1
 80040f4:	fa02 f303 	lsl.w	r3, r2, r3
 80040f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6a1a      	ldr	r2, [r3, #32]
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	43db      	mvns	r3, r3
 8004102:	401a      	ands	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6a1a      	ldr	r2, [r3, #32]
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	f003 031f 	and.w	r3, r3, #31
 8004112:	6879      	ldr	r1, [r7, #4]
 8004114:	fa01 f303 	lsl.w	r3, r1, r3
 8004118:	431a      	orrs	r2, r3
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	621a      	str	r2, [r3, #32]
}
 800411e:	bf00      	nop
 8004120:	371c      	adds	r7, #28
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
	...

0800412c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800412c:	b480      	push	{r7}
 800412e:	b085      	sub	sp, #20
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800413c:	2b01      	cmp	r3, #1
 800413e:	d101      	bne.n	8004144 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004140:	2302      	movs	r3, #2
 8004142:	e054      	b.n	80041ee <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2202      	movs	r2, #2
 8004150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a24      	ldr	r2, [pc, #144]	@ (80041fc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d108      	bne.n	8004180 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004174:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	4313      	orrs	r3, r2
 800417e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004186:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	4313      	orrs	r3, r2
 8004190:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a17      	ldr	r2, [pc, #92]	@ (80041fc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d00e      	beq.n	80041c2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041ac:	d009      	beq.n	80041c2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a13      	ldr	r2, [pc, #76]	@ (8004200 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d004      	beq.n	80041c2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a11      	ldr	r2, [pc, #68]	@ (8004204 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d10c      	bne.n	80041dc <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	68ba      	ldr	r2, [r7, #8]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68ba      	ldr	r2, [r7, #8]
 80041da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3714      	adds	r7, #20
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	40012c00 	.word	0x40012c00
 8004200:	40000400 	.word	0x40000400
 8004204:	40014000 	.word	0x40014000

08004208 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004208:	b480      	push	{r7}
 800420a:	b085      	sub	sp, #20
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004212:	2300      	movs	r3, #0
 8004214:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800421c:	2b01      	cmp	r3, #1
 800421e:	d101      	bne.n	8004224 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004220:	2302      	movs	r3, #2
 8004222:	e060      	b.n	80042e6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	4313      	orrs	r3, r2
 8004238:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	4313      	orrs	r3, r2
 8004246:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	4313      	orrs	r3, r2
 8004254:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4313      	orrs	r3, r2
 8004262:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	4313      	orrs	r3, r2
 8004270:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	695b      	ldr	r3, [r3, #20]
 800427c:	4313      	orrs	r3, r2
 800427e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800428a:	4313      	orrs	r3, r2
 800428c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	041b      	lsls	r3, r3, #16
 800429a:	4313      	orrs	r3, r2
 800429c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a14      	ldr	r2, [pc, #80]	@ (80042f4 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d115      	bne.n	80042d4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b2:	051b      	lsls	r3, r3, #20
 80042b4:	4313      	orrs	r3, r2
 80042b6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	69db      	ldr	r3, [r3, #28]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	6a1b      	ldr	r3, [r3, #32]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3714      	adds	r7, #20
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	40012c00 	.word	0x40012c00

080042f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d101      	bne.n	800430a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e040      	b.n	800438c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800430e:	2b00      	cmp	r3, #0
 8004310:	d106      	bne.n	8004320 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f7fc fe34 	bl	8000f88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2224      	movs	r2, #36	@ 0x24
 8004324:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f022 0201 	bic.w	r2, r2, #1
 8004334:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800433a:	2b00      	cmp	r3, #0
 800433c:	d002      	beq.n	8004344 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 fca8 	bl	8004c94 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f000 fb6f 	bl	8004a28 <UART_SetConfig>
 800434a:	4603      	mov	r3, r0
 800434c:	2b01      	cmp	r3, #1
 800434e:	d101      	bne.n	8004354 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e01b      	b.n	800438c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	685a      	ldr	r2, [r3, #4]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004362:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	689a      	ldr	r2, [r3, #8]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004372:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f042 0201 	orr.w	r2, r2, #1
 8004382:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 fd27 	bl	8004dd8 <UART_CheckIdleState>
 800438a:	4603      	mov	r3, r0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3708      	adds	r7, #8
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b08a      	sub	sp, #40	@ 0x28
 8004398:	af00      	add	r7, sp, #0
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	4613      	mov	r3, r2
 80043a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043a8:	2b20      	cmp	r3, #32
 80043aa:	d132      	bne.n	8004412 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d002      	beq.n	80043b8 <HAL_UART_Receive_IT+0x24>
 80043b2:	88fb      	ldrh	r3, [r7, #6]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d101      	bne.n	80043bc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e02b      	b.n	8004414 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d018      	beq.n	8004402 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	e853 3f00 	ldrex	r3, [r3]
 80043dc:	613b      	str	r3, [r7, #16]
   return(result);
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80043e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	461a      	mov	r2, r3
 80043ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ee:	623b      	str	r3, [r7, #32]
 80043f0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f2:	69f9      	ldr	r1, [r7, #28]
 80043f4:	6a3a      	ldr	r2, [r7, #32]
 80043f6:	e841 2300 	strex	r3, r2, [r1]
 80043fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d1e6      	bne.n	80043d0 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004402:	88fb      	ldrh	r3, [r7, #6]
 8004404:	461a      	mov	r2, r3
 8004406:	68b9      	ldr	r1, [r7, #8]
 8004408:	68f8      	ldr	r0, [r7, #12]
 800440a:	f000 fdfb 	bl	8005004 <UART_Start_Receive_IT>
 800440e:	4603      	mov	r3, r0
 8004410:	e000      	b.n	8004414 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8004412:	2302      	movs	r3, #2
  }
}
 8004414:	4618      	mov	r0, r3
 8004416:	3728      	adds	r7, #40	@ 0x28
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b0ba      	sub	sp, #232	@ 0xe8
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	69db      	ldr	r3, [r3, #28]
 800442a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004442:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004446:	f640 030f 	movw	r3, #2063	@ 0x80f
 800444a:	4013      	ands	r3, r2
 800444c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004450:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004454:	2b00      	cmp	r3, #0
 8004456:	d115      	bne.n	8004484 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004458:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800445c:	f003 0320 	and.w	r3, r3, #32
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00f      	beq.n	8004484 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004464:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004468:	f003 0320 	and.w	r3, r3, #32
 800446c:	2b00      	cmp	r3, #0
 800446e:	d009      	beq.n	8004484 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004474:	2b00      	cmp	r3, #0
 8004476:	f000 82ab 	beq.w	80049d0 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	4798      	blx	r3
      }
      return;
 8004482:	e2a5      	b.n	80049d0 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004484:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004488:	2b00      	cmp	r3, #0
 800448a:	f000 8117 	beq.w	80046bc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800448e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	2b00      	cmp	r3, #0
 8004498:	d106      	bne.n	80044a8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800449a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800449e:	4b85      	ldr	r3, [pc, #532]	@ (80046b4 <HAL_UART_IRQHandler+0x298>)
 80044a0:	4013      	ands	r3, r2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	f000 810a 	beq.w	80046bc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80044a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044ac:	f003 0301 	and.w	r3, r3, #1
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d011      	beq.n	80044d8 <HAL_UART_IRQHandler+0xbc>
 80044b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d00b      	beq.n	80044d8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2201      	movs	r2, #1
 80044c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044ce:	f043 0201 	orr.w	r2, r3, #1
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80044d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044dc:	f003 0302 	and.w	r3, r3, #2
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d011      	beq.n	8004508 <HAL_UART_IRQHandler+0xec>
 80044e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80044e8:	f003 0301 	and.w	r3, r3, #1
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00b      	beq.n	8004508 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2202      	movs	r2, #2
 80044f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044fe:	f043 0204 	orr.w	r2, r3, #4
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004508:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800450c:	f003 0304 	and.w	r3, r3, #4
 8004510:	2b00      	cmp	r3, #0
 8004512:	d011      	beq.n	8004538 <HAL_UART_IRQHandler+0x11c>
 8004514:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004518:	f003 0301 	and.w	r3, r3, #1
 800451c:	2b00      	cmp	r3, #0
 800451e:	d00b      	beq.n	8004538 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2204      	movs	r2, #4
 8004526:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800452e:	f043 0202 	orr.w	r2, r3, #2
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004538:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800453c:	f003 0308 	and.w	r3, r3, #8
 8004540:	2b00      	cmp	r3, #0
 8004542:	d017      	beq.n	8004574 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004544:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004548:	f003 0320 	and.w	r3, r3, #32
 800454c:	2b00      	cmp	r3, #0
 800454e:	d105      	bne.n	800455c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004550:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004554:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00b      	beq.n	8004574 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2208      	movs	r2, #8
 8004562:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800456a:	f043 0208 	orr.w	r2, r3, #8
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004578:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800457c:	2b00      	cmp	r3, #0
 800457e:	d012      	beq.n	80045a6 <HAL_UART_IRQHandler+0x18a>
 8004580:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004584:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d00c      	beq.n	80045a6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004594:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800459c:	f043 0220 	orr.w	r2, r3, #32
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f000 8211 	beq.w	80049d4 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80045b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045b6:	f003 0320 	and.w	r3, r3, #32
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00d      	beq.n	80045da <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80045be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045c2:	f003 0320 	and.w	r3, r3, #32
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d007      	beq.n	80045da <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d003      	beq.n	80045da <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045e0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045ee:	2b40      	cmp	r3, #64	@ 0x40
 80045f0:	d005      	beq.n	80045fe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80045f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045f6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d04f      	beq.n	800469e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 fdc6 	bl	8005190 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800460e:	2b40      	cmp	r3, #64	@ 0x40
 8004610:	d141      	bne.n	8004696 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	3308      	adds	r3, #8
 8004618:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800461c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004620:	e853 3f00 	ldrex	r3, [r3]
 8004624:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004628:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800462c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004630:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	3308      	adds	r3, #8
 800463a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800463e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004642:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004646:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800464a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800464e:	e841 2300 	strex	r3, r2, [r1]
 8004652:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004656:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1d9      	bne.n	8004612 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004662:	2b00      	cmp	r3, #0
 8004664:	d013      	beq.n	800468e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800466a:	4a13      	ldr	r2, [pc, #76]	@ (80046b8 <HAL_UART_IRQHandler+0x29c>)
 800466c:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004672:	4618      	mov	r0, r3
 8004674:	f7fc ffa0 	bl	80015b8 <HAL_DMA_Abort_IT>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d017      	beq.n	80046ae <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004682:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004688:	4610      	mov	r0, r2
 800468a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800468c:	e00f      	b.n	80046ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 f9b4 	bl	80049fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004694:	e00b      	b.n	80046ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 f9b0 	bl	80049fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800469c:	e007      	b.n	80046ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 f9ac 	bl	80049fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80046ac:	e192      	b.n	80049d4 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046ae:	bf00      	nop
    return;
 80046b0:	e190      	b.n	80049d4 <HAL_UART_IRQHandler+0x5b8>
 80046b2:	bf00      	nop
 80046b4:	04000120 	.word	0x04000120
 80046b8:	08005259 	.word	0x08005259

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	f040 814b 	bne.w	800495c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80046c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046ca:	f003 0310 	and.w	r3, r3, #16
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	f000 8144 	beq.w	800495c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80046d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046d8:	f003 0310 	and.w	r3, r3, #16
 80046dc:	2b00      	cmp	r3, #0
 80046de:	f000 813d 	beq.w	800495c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2210      	movs	r2, #16
 80046e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046f4:	2b40      	cmp	r3, #64	@ 0x40
 80046f6:	f040 80b5 	bne.w	8004864 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004706:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800470a:	2b00      	cmp	r3, #0
 800470c:	f000 8164 	beq.w	80049d8 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004716:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800471a:	429a      	cmp	r2, r3
 800471c:	f080 815c 	bcs.w	80049d8 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004726:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	2b20      	cmp	r3, #32
 8004732:	f000 8086 	beq.w	8004842 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004742:	e853 3f00 	ldrex	r3, [r3]
 8004746:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800474a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800474e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004752:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	461a      	mov	r2, r3
 800475c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004760:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004764:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004768:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800476c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004770:	e841 2300 	strex	r3, r2, [r1]
 8004774:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004778:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800477c:	2b00      	cmp	r3, #0
 800477e:	d1da      	bne.n	8004736 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	3308      	adds	r3, #8
 8004786:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004788:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800478a:	e853 3f00 	ldrex	r3, [r3]
 800478e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004790:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004792:	f023 0301 	bic.w	r3, r3, #1
 8004796:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	3308      	adds	r3, #8
 80047a0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80047a4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80047a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047aa:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80047ac:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80047b0:	e841 2300 	strex	r3, r2, [r1]
 80047b4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80047b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d1e1      	bne.n	8004780 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	3308      	adds	r3, #8
 80047c2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80047c6:	e853 3f00 	ldrex	r3, [r3]
 80047ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80047cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	3308      	adds	r3, #8
 80047dc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80047e0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80047e2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80047e6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80047e8:	e841 2300 	strex	r3, r2, [r1]
 80047ec:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80047ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d1e3      	bne.n	80047bc <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2220      	movs	r2, #32
 80047f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004808:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800480a:	e853 3f00 	ldrex	r3, [r3]
 800480e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004810:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004812:	f023 0310 	bic.w	r3, r3, #16
 8004816:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	461a      	mov	r2, r3
 8004820:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004824:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004826:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004828:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800482a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800482c:	e841 2300 	strex	r3, r2, [r1]
 8004830:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004832:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004834:	2b00      	cmp	r3, #0
 8004836:	d1e4      	bne.n	8004802 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800483c:	4618      	mov	r0, r3
 800483e:	f7fc fe7d 	bl	800153c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2202      	movs	r2, #2
 8004846:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004854:	b29b      	uxth	r3, r3
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	b29b      	uxth	r3, r3
 800485a:	4619      	mov	r1, r3
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f000 f8d7 	bl	8004a10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004862:	e0b9      	b.n	80049d8 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004870:	b29b      	uxth	r3, r3
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800487e:	b29b      	uxth	r3, r3
 8004880:	2b00      	cmp	r3, #0
 8004882:	f000 80ab 	beq.w	80049dc <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8004886:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800488a:	2b00      	cmp	r3, #0
 800488c:	f000 80a6 	beq.w	80049dc <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004898:	e853 3f00 	ldrex	r3, [r3]
 800489c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800489e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80048a4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	461a      	mov	r2, r3
 80048ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80048b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80048b4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80048b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80048ba:	e841 2300 	strex	r3, r2, [r1]
 80048be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80048c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1e4      	bne.n	8004890 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	3308      	adds	r3, #8
 80048cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d0:	e853 3f00 	ldrex	r3, [r3]
 80048d4:	623b      	str	r3, [r7, #32]
   return(result);
 80048d6:	6a3b      	ldr	r3, [r7, #32]
 80048d8:	f023 0301 	bic.w	r3, r3, #1
 80048dc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	3308      	adds	r3, #8
 80048e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80048ea:	633a      	str	r2, [r7, #48]	@ 0x30
 80048ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80048f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048f2:	e841 2300 	strex	r3, r2, [r1]
 80048f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80048f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1e3      	bne.n	80048c6 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2220      	movs	r2, #32
 8004902:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	e853 3f00 	ldrex	r3, [r3]
 800491e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f023 0310 	bic.w	r3, r3, #16
 8004926:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	461a      	mov	r2, r3
 8004930:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004934:	61fb      	str	r3, [r7, #28]
 8004936:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004938:	69b9      	ldr	r1, [r7, #24]
 800493a:	69fa      	ldr	r2, [r7, #28]
 800493c:	e841 2300 	strex	r3, r2, [r1]
 8004940:	617b      	str	r3, [r7, #20]
   return(result);
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1e4      	bne.n	8004912 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2202      	movs	r2, #2
 800494c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800494e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004952:	4619      	mov	r1, r3
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f000 f85b 	bl	8004a10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800495a:	e03f      	b.n	80049dc <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800495c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004960:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d00e      	beq.n	8004986 <HAL_UART_IRQHandler+0x56a>
 8004968:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800496c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004970:	2b00      	cmp	r3, #0
 8004972:	d008      	beq.n	8004986 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800497c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 fe52 	bl	8005628 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004984:	e02d      	b.n	80049e2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800498a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00e      	beq.n	80049b0 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004992:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004996:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800499a:	2b00      	cmp	r3, #0
 800499c:	d008      	beq.n	80049b0 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d01c      	beq.n	80049e0 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	4798      	blx	r3
    }
    return;
 80049ae:	e017      	b.n	80049e0 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80049b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d012      	beq.n	80049e2 <HAL_UART_IRQHandler+0x5c6>
 80049bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d00c      	beq.n	80049e2 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f000 fc5b 	bl	8005284 <UART_EndTransmit_IT>
    return;
 80049ce:	e008      	b.n	80049e2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80049d0:	bf00      	nop
 80049d2:	e006      	b.n	80049e2 <HAL_UART_IRQHandler+0x5c6>
    return;
 80049d4:	bf00      	nop
 80049d6:	e004      	b.n	80049e2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80049d8:	bf00      	nop
 80049da:	e002      	b.n	80049e2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80049dc:	bf00      	nop
 80049de:	e000      	b.n	80049e2 <HAL_UART_IRQHandler+0x5c6>
    return;
 80049e0:	bf00      	nop
  }

}
 80049e2:	37e8      	adds	r7, #232	@ 0xe8
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80049f0:	bf00      	nop
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004a04:	bf00      	nop
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	460b      	mov	r3, r1
 8004a1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a1c:	bf00      	nop
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b088      	sub	sp, #32
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a30:	2300      	movs	r3, #0
 8004a32:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	689a      	ldr	r2, [r3, #8]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	431a      	orrs	r2, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	695b      	ldr	r3, [r3, #20]
 8004a42:	431a      	orrs	r2, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	69db      	ldr	r3, [r3, #28]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	4b8a      	ldr	r3, [pc, #552]	@ (8004c7c <UART_SetConfig+0x254>)
 8004a54:	4013      	ands	r3, r2
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	6812      	ldr	r2, [r2, #0]
 8004a5a:	6979      	ldr	r1, [r7, #20]
 8004a5c:	430b      	orrs	r3, r1
 8004a5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	68da      	ldr	r2, [r3, #12]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	430a      	orrs	r2, r1
 8004a74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	699b      	ldr	r3, [r3, #24]
 8004a7a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a1b      	ldr	r3, [r3, #32]
 8004a80:	697a      	ldr	r2, [r7, #20]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	430a      	orrs	r2, r1
 8004a98:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a78      	ldr	r2, [pc, #480]	@ (8004c80 <UART_SetConfig+0x258>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d120      	bne.n	8004ae6 <UART_SetConfig+0xbe>
 8004aa4:	4b77      	ldr	r3, [pc, #476]	@ (8004c84 <UART_SetConfig+0x25c>)
 8004aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aa8:	f003 0303 	and.w	r3, r3, #3
 8004aac:	2b03      	cmp	r3, #3
 8004aae:	d817      	bhi.n	8004ae0 <UART_SetConfig+0xb8>
 8004ab0:	a201      	add	r2, pc, #4	@ (adr r2, 8004ab8 <UART_SetConfig+0x90>)
 8004ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab6:	bf00      	nop
 8004ab8:	08004ac9 	.word	0x08004ac9
 8004abc:	08004ad5 	.word	0x08004ad5
 8004ac0:	08004adb 	.word	0x08004adb
 8004ac4:	08004acf 	.word	0x08004acf
 8004ac8:	2300      	movs	r3, #0
 8004aca:	77fb      	strb	r3, [r7, #31]
 8004acc:	e01d      	b.n	8004b0a <UART_SetConfig+0xe2>
 8004ace:	2302      	movs	r3, #2
 8004ad0:	77fb      	strb	r3, [r7, #31]
 8004ad2:	e01a      	b.n	8004b0a <UART_SetConfig+0xe2>
 8004ad4:	2304      	movs	r3, #4
 8004ad6:	77fb      	strb	r3, [r7, #31]
 8004ad8:	e017      	b.n	8004b0a <UART_SetConfig+0xe2>
 8004ada:	2308      	movs	r3, #8
 8004adc:	77fb      	strb	r3, [r7, #31]
 8004ade:	e014      	b.n	8004b0a <UART_SetConfig+0xe2>
 8004ae0:	2310      	movs	r3, #16
 8004ae2:	77fb      	strb	r3, [r7, #31]
 8004ae4:	e011      	b.n	8004b0a <UART_SetConfig+0xe2>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a67      	ldr	r2, [pc, #412]	@ (8004c88 <UART_SetConfig+0x260>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d102      	bne.n	8004af6 <UART_SetConfig+0xce>
 8004af0:	2300      	movs	r3, #0
 8004af2:	77fb      	strb	r3, [r7, #31]
 8004af4:	e009      	b.n	8004b0a <UART_SetConfig+0xe2>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a64      	ldr	r2, [pc, #400]	@ (8004c8c <UART_SetConfig+0x264>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d102      	bne.n	8004b06 <UART_SetConfig+0xde>
 8004b00:	2300      	movs	r3, #0
 8004b02:	77fb      	strb	r3, [r7, #31]
 8004b04:	e001      	b.n	8004b0a <UART_SetConfig+0xe2>
 8004b06:	2310      	movs	r3, #16
 8004b08:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	69db      	ldr	r3, [r3, #28]
 8004b0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b12:	d15a      	bne.n	8004bca <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004b14:	7ffb      	ldrb	r3, [r7, #31]
 8004b16:	2b08      	cmp	r3, #8
 8004b18:	d827      	bhi.n	8004b6a <UART_SetConfig+0x142>
 8004b1a:	a201      	add	r2, pc, #4	@ (adr r2, 8004b20 <UART_SetConfig+0xf8>)
 8004b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b20:	08004b45 	.word	0x08004b45
 8004b24:	08004b4d 	.word	0x08004b4d
 8004b28:	08004b55 	.word	0x08004b55
 8004b2c:	08004b6b 	.word	0x08004b6b
 8004b30:	08004b5b 	.word	0x08004b5b
 8004b34:	08004b6b 	.word	0x08004b6b
 8004b38:	08004b6b 	.word	0x08004b6b
 8004b3c:	08004b6b 	.word	0x08004b6b
 8004b40:	08004b63 	.word	0x08004b63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b44:	f7fe fa1c 	bl	8002f80 <HAL_RCC_GetPCLK1Freq>
 8004b48:	61b8      	str	r0, [r7, #24]
        break;
 8004b4a:	e013      	b.n	8004b74 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b4c:	f7fe fa3a 	bl	8002fc4 <HAL_RCC_GetPCLK2Freq>
 8004b50:	61b8      	str	r0, [r7, #24]
        break;
 8004b52:	e00f      	b.n	8004b74 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b54:	4b4e      	ldr	r3, [pc, #312]	@ (8004c90 <UART_SetConfig+0x268>)
 8004b56:	61bb      	str	r3, [r7, #24]
        break;
 8004b58:	e00c      	b.n	8004b74 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b5a:	f7fe f9b1 	bl	8002ec0 <HAL_RCC_GetSysClockFreq>
 8004b5e:	61b8      	str	r0, [r7, #24]
        break;
 8004b60:	e008      	b.n	8004b74 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b66:	61bb      	str	r3, [r7, #24]
        break;
 8004b68:	e004      	b.n	8004b74 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	77bb      	strb	r3, [r7, #30]
        break;
 8004b72:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d074      	beq.n	8004c64 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	005a      	lsls	r2, r3, #1
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	085b      	lsrs	r3, r3, #1
 8004b84:	441a      	add	r2, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b8e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	2b0f      	cmp	r3, #15
 8004b94:	d916      	bls.n	8004bc4 <UART_SetConfig+0x19c>
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b9c:	d212      	bcs.n	8004bc4 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	f023 030f 	bic.w	r3, r3, #15
 8004ba6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	085b      	lsrs	r3, r3, #1
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	f003 0307 	and.w	r3, r3, #7
 8004bb2:	b29a      	uxth	r2, r3
 8004bb4:	89fb      	ldrh	r3, [r7, #14]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	89fa      	ldrh	r2, [r7, #14]
 8004bc0:	60da      	str	r2, [r3, #12]
 8004bc2:	e04f      	b.n	8004c64 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	77bb      	strb	r3, [r7, #30]
 8004bc8:	e04c      	b.n	8004c64 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004bca:	7ffb      	ldrb	r3, [r7, #31]
 8004bcc:	2b08      	cmp	r3, #8
 8004bce:	d828      	bhi.n	8004c22 <UART_SetConfig+0x1fa>
 8004bd0:	a201      	add	r2, pc, #4	@ (adr r2, 8004bd8 <UART_SetConfig+0x1b0>)
 8004bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd6:	bf00      	nop
 8004bd8:	08004bfd 	.word	0x08004bfd
 8004bdc:	08004c05 	.word	0x08004c05
 8004be0:	08004c0d 	.word	0x08004c0d
 8004be4:	08004c23 	.word	0x08004c23
 8004be8:	08004c13 	.word	0x08004c13
 8004bec:	08004c23 	.word	0x08004c23
 8004bf0:	08004c23 	.word	0x08004c23
 8004bf4:	08004c23 	.word	0x08004c23
 8004bf8:	08004c1b 	.word	0x08004c1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bfc:	f7fe f9c0 	bl	8002f80 <HAL_RCC_GetPCLK1Freq>
 8004c00:	61b8      	str	r0, [r7, #24]
        break;
 8004c02:	e013      	b.n	8004c2c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c04:	f7fe f9de 	bl	8002fc4 <HAL_RCC_GetPCLK2Freq>
 8004c08:	61b8      	str	r0, [r7, #24]
        break;
 8004c0a:	e00f      	b.n	8004c2c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c0c:	4b20      	ldr	r3, [pc, #128]	@ (8004c90 <UART_SetConfig+0x268>)
 8004c0e:	61bb      	str	r3, [r7, #24]
        break;
 8004c10:	e00c      	b.n	8004c2c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c12:	f7fe f955 	bl	8002ec0 <HAL_RCC_GetSysClockFreq>
 8004c16:	61b8      	str	r0, [r7, #24]
        break;
 8004c18:	e008      	b.n	8004c2c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c1e:	61bb      	str	r3, [r7, #24]
        break;
 8004c20:	e004      	b.n	8004c2c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004c22:	2300      	movs	r3, #0
 8004c24:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	77bb      	strb	r3, [r7, #30]
        break;
 8004c2a:	bf00      	nop
    }

    if (pclk != 0U)
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d018      	beq.n	8004c64 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	085a      	lsrs	r2, r3, #1
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	441a      	add	r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c44:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	2b0f      	cmp	r3, #15
 8004c4a:	d909      	bls.n	8004c60 <UART_SetConfig+0x238>
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c52:	d205      	bcs.n	8004c60 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	b29a      	uxth	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	60da      	str	r2, [r3, #12]
 8004c5e:	e001      	b.n	8004c64 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004c70:	7fbb      	ldrb	r3, [r7, #30]
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3720      	adds	r7, #32
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	efff69f3 	.word	0xefff69f3
 8004c80:	40013800 	.word	0x40013800
 8004c84:	40021000 	.word	0x40021000
 8004c88:	40004400 	.word	0x40004400
 8004c8c:	40004800 	.word	0x40004800
 8004c90:	007a1200 	.word	0x007a1200

08004c94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca0:	f003 0308 	and.w	r3, r3, #8
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d00a      	beq.n	8004cbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	430a      	orrs	r2, r1
 8004cbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cc2:	f003 0301 	and.w	r3, r3, #1
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00a      	beq.n	8004ce0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	430a      	orrs	r2, r1
 8004cde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce4:	f003 0302 	and.w	r3, r3, #2
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d00a      	beq.n	8004d02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d06:	f003 0304 	and.w	r3, r3, #4
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00a      	beq.n	8004d24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	430a      	orrs	r2, r1
 8004d22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d28:	f003 0310 	and.w	r3, r3, #16
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d00a      	beq.n	8004d46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	430a      	orrs	r2, r1
 8004d44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d4a:	f003 0320 	and.w	r3, r3, #32
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00a      	beq.n	8004d68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	430a      	orrs	r2, r1
 8004d66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d01a      	beq.n	8004daa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	430a      	orrs	r2, r1
 8004d88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d92:	d10a      	bne.n	8004daa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	430a      	orrs	r2, r1
 8004da8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00a      	beq.n	8004dcc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	430a      	orrs	r2, r1
 8004dca:	605a      	str	r2, [r3, #4]
  }
}
 8004dcc:	bf00      	nop
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b098      	sub	sp, #96	@ 0x60
 8004ddc:	af02      	add	r7, sp, #8
 8004dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004de8:	f7fc fa44 	bl	8001274 <HAL_GetTick>
 8004dec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0308 	and.w	r3, r3, #8
 8004df8:	2b08      	cmp	r3, #8
 8004dfa:	d12e      	bne.n	8004e5a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dfc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004e00:	9300      	str	r3, [sp, #0]
 8004e02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e04:	2200      	movs	r2, #0
 8004e06:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 f88c 	bl	8004f28 <UART_WaitOnFlagUntilTimeout>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d021      	beq.n	8004e5a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e1e:	e853 3f00 	ldrex	r3, [r3]
 8004e22:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004e24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	461a      	mov	r2, r3
 8004e32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e34:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e36:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e38:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e3c:	e841 2300 	strex	r3, r2, [r1]
 8004e40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d1e6      	bne.n	8004e16 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2220      	movs	r2, #32
 8004e4c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e062      	b.n	8004f20 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0304 	and.w	r3, r3, #4
 8004e64:	2b04      	cmp	r3, #4
 8004e66:	d149      	bne.n	8004efc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e68:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004e6c:	9300      	str	r3, [sp, #0]
 8004e6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e70:	2200      	movs	r2, #0
 8004e72:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 f856 	bl	8004f28 <UART_WaitOnFlagUntilTimeout>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d03c      	beq.n	8004efc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e8a:	e853 3f00 	ldrex	r3, [r3]
 8004e8e:	623b      	str	r3, [r7, #32]
   return(result);
 8004e90:	6a3b      	ldr	r3, [r7, #32]
 8004e92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ea0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ea2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ea6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ea8:	e841 2300 	strex	r3, r2, [r1]
 8004eac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d1e6      	bne.n	8004e82 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	3308      	adds	r3, #8
 8004eba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	e853 3f00 	ldrex	r3, [r3]
 8004ec2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f023 0301 	bic.w	r3, r3, #1
 8004eca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	3308      	adds	r3, #8
 8004ed2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ed4:	61fa      	str	r2, [r7, #28]
 8004ed6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed8:	69b9      	ldr	r1, [r7, #24]
 8004eda:	69fa      	ldr	r2, [r7, #28]
 8004edc:	e841 2300 	strex	r3, r2, [r1]
 8004ee0:	617b      	str	r3, [r7, #20]
   return(result);
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1e5      	bne.n	8004eb4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2220      	movs	r2, #32
 8004eec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	e011      	b.n	8004f20 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2220      	movs	r2, #32
 8004f00:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2220      	movs	r2, #32
 8004f06:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3758      	adds	r7, #88	@ 0x58
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	603b      	str	r3, [r7, #0]
 8004f34:	4613      	mov	r3, r2
 8004f36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f38:	e04f      	b.n	8004fda <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f40:	d04b      	beq.n	8004fda <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f42:	f7fc f997 	bl	8001274 <HAL_GetTick>
 8004f46:	4602      	mov	r2, r0
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	69ba      	ldr	r2, [r7, #24]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d302      	bcc.n	8004f58 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f52:	69bb      	ldr	r3, [r7, #24]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d101      	bne.n	8004f5c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	e04e      	b.n	8004ffa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0304 	and.w	r3, r3, #4
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d037      	beq.n	8004fda <UART_WaitOnFlagUntilTimeout+0xb2>
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	2b80      	cmp	r3, #128	@ 0x80
 8004f6e:	d034      	beq.n	8004fda <UART_WaitOnFlagUntilTimeout+0xb2>
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	2b40      	cmp	r3, #64	@ 0x40
 8004f74:	d031      	beq.n	8004fda <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	69db      	ldr	r3, [r3, #28]
 8004f7c:	f003 0308 	and.w	r3, r3, #8
 8004f80:	2b08      	cmp	r3, #8
 8004f82:	d110      	bne.n	8004fa6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2208      	movs	r2, #8
 8004f8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f8c:	68f8      	ldr	r0, [r7, #12]
 8004f8e:	f000 f8ff 	bl	8005190 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2208      	movs	r2, #8
 8004f96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e029      	b.n	8004ffa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	69db      	ldr	r3, [r3, #28]
 8004fac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fb4:	d111      	bne.n	8004fda <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004fbe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004fc0:	68f8      	ldr	r0, [r7, #12]
 8004fc2:	f000 f8e5 	bl	8005190 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2220      	movs	r2, #32
 8004fca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e00f      	b.n	8004ffa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	69da      	ldr	r2, [r3, #28]
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	68ba      	ldr	r2, [r7, #8]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	bf0c      	ite	eq
 8004fea:	2301      	moveq	r3, #1
 8004fec:	2300      	movne	r3, #0
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	79fb      	ldrb	r3, [r7, #7]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d0a0      	beq.n	8004f3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3710      	adds	r7, #16
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
	...

08005004 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005004:	b480      	push	{r7}
 8005006:	b097      	sub	sp, #92	@ 0x5c
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	4613      	mov	r3, r2
 8005010:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	68ba      	ldr	r2, [r7, #8]
 8005016:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	88fa      	ldrh	r2, [r7, #6]
 800501c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	88fa      	ldrh	r2, [r7, #6]
 8005024:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005036:	d10e      	bne.n	8005056 <UART_Start_Receive_IT+0x52>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d105      	bne.n	800504c <UART_Start_Receive_IT+0x48>
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005046:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800504a:	e02d      	b.n	80050a8 <UART_Start_Receive_IT+0xa4>
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	22ff      	movs	r2, #255	@ 0xff
 8005050:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005054:	e028      	b.n	80050a8 <UART_Start_Receive_IT+0xa4>
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d10d      	bne.n	800507a <UART_Start_Receive_IT+0x76>
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d104      	bne.n	8005070 <UART_Start_Receive_IT+0x6c>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	22ff      	movs	r2, #255	@ 0xff
 800506a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800506e:	e01b      	b.n	80050a8 <UART_Start_Receive_IT+0xa4>
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	227f      	movs	r2, #127	@ 0x7f
 8005074:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005078:	e016      	b.n	80050a8 <UART_Start_Receive_IT+0xa4>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005082:	d10d      	bne.n	80050a0 <UART_Start_Receive_IT+0x9c>
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d104      	bne.n	8005096 <UART_Start_Receive_IT+0x92>
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	227f      	movs	r2, #127	@ 0x7f
 8005090:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005094:	e008      	b.n	80050a8 <UART_Start_Receive_IT+0xa4>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	223f      	movs	r2, #63	@ 0x3f
 800509a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800509e:	e003      	b.n	80050a8 <UART_Start_Receive_IT+0xa4>
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2222      	movs	r2, #34	@ 0x22
 80050b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	3308      	adds	r3, #8
 80050be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050c2:	e853 3f00 	ldrex	r3, [r3]
 80050c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80050c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050ca:	f043 0301 	orr.w	r3, r3, #1
 80050ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	3308      	adds	r3, #8
 80050d6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80050d8:	64ba      	str	r2, [r7, #72]	@ 0x48
 80050da:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050dc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80050de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80050e0:	e841 2300 	strex	r3, r2, [r1]
 80050e4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80050e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d1e5      	bne.n	80050b8 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050f4:	d107      	bne.n	8005106 <UART_Start_Receive_IT+0x102>
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d103      	bne.n	8005106 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	4a21      	ldr	r2, [pc, #132]	@ (8005188 <UART_Start_Receive_IT+0x184>)
 8005102:	669a      	str	r2, [r3, #104]	@ 0x68
 8005104:	e002      	b.n	800510c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	4a20      	ldr	r2, [pc, #128]	@ (800518c <UART_Start_Receive_IT+0x188>)
 800510a:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	691b      	ldr	r3, [r3, #16]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d019      	beq.n	8005148 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800511a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800511c:	e853 3f00 	ldrex	r3, [r3]
 8005120:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005124:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005128:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	461a      	mov	r2, r3
 8005130:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005132:	637b      	str	r3, [r7, #52]	@ 0x34
 8005134:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005136:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005138:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800513a:	e841 2300 	strex	r3, r2, [r1]
 800513e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005142:	2b00      	cmp	r3, #0
 8005144:	d1e6      	bne.n	8005114 <UART_Start_Receive_IT+0x110>
 8005146:	e018      	b.n	800517a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	e853 3f00 	ldrex	r3, [r3]
 8005154:	613b      	str	r3, [r7, #16]
   return(result);
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	f043 0320 	orr.w	r3, r3, #32
 800515c:	653b      	str	r3, [r7, #80]	@ 0x50
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	461a      	mov	r2, r3
 8005164:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005166:	623b      	str	r3, [r7, #32]
 8005168:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516a:	69f9      	ldr	r1, [r7, #28]
 800516c:	6a3a      	ldr	r2, [r7, #32]
 800516e:	e841 2300 	strex	r3, r2, [r1]
 8005172:	61bb      	str	r3, [r7, #24]
   return(result);
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1e6      	bne.n	8005148 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800517a:	2300      	movs	r3, #0
}
 800517c:	4618      	mov	r0, r3
 800517e:	375c      	adds	r7, #92	@ 0x5c
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr
 8005188:	08005481 	.word	0x08005481
 800518c:	080052d9 	.word	0x080052d9

08005190 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005190:	b480      	push	{r7}
 8005192:	b095      	sub	sp, #84	@ 0x54
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800519e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051a0:	e853 3f00 	ldrex	r3, [r3]
 80051a4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80051a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	461a      	mov	r2, r3
 80051b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80051b8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80051bc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80051be:	e841 2300 	strex	r3, r2, [r1]
 80051c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80051c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d1e6      	bne.n	8005198 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	3308      	adds	r3, #8
 80051d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d2:	6a3b      	ldr	r3, [r7, #32]
 80051d4:	e853 3f00 	ldrex	r3, [r3]
 80051d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	f023 0301 	bic.w	r3, r3, #1
 80051e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	3308      	adds	r3, #8
 80051e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80051ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80051ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80051f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80051f2:	e841 2300 	strex	r3, r2, [r1]
 80051f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80051f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d1e5      	bne.n	80051ca <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005202:	2b01      	cmp	r3, #1
 8005204:	d118      	bne.n	8005238 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	e853 3f00 	ldrex	r3, [r3]
 8005212:	60bb      	str	r3, [r7, #8]
   return(result);
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	f023 0310 	bic.w	r3, r3, #16
 800521a:	647b      	str	r3, [r7, #68]	@ 0x44
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	461a      	mov	r2, r3
 8005222:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005224:	61bb      	str	r3, [r7, #24]
 8005226:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005228:	6979      	ldr	r1, [r7, #20]
 800522a:	69ba      	ldr	r2, [r7, #24]
 800522c:	e841 2300 	strex	r3, r2, [r1]
 8005230:	613b      	str	r3, [r7, #16]
   return(result);
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d1e6      	bne.n	8005206 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2220      	movs	r2, #32
 800523c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800524c:	bf00      	nop
 800524e:	3754      	adds	r7, #84	@ 0x54
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005264:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2200      	movs	r2, #0
 800526a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2200      	movs	r2, #0
 8005272:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005276:	68f8      	ldr	r0, [r7, #12]
 8005278:	f7ff fbc0 	bl	80049fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800527c:	bf00      	nop
 800527e:	3710      	adds	r7, #16
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b088      	sub	sp, #32
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	e853 3f00 	ldrex	r3, [r3]
 8005298:	60bb      	str	r3, [r7, #8]
   return(result);
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052a0:	61fb      	str	r3, [r7, #28]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	461a      	mov	r2, r3
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	61bb      	str	r3, [r7, #24]
 80052ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ae:	6979      	ldr	r1, [r7, #20]
 80052b0:	69ba      	ldr	r2, [r7, #24]
 80052b2:	e841 2300 	strex	r3, r2, [r1]
 80052b6:	613b      	str	r3, [r7, #16]
   return(result);
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d1e6      	bne.n	800528c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2220      	movs	r2, #32
 80052c2:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f7ff fb8c 	bl	80049e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052d0:	bf00      	nop
 80052d2:	3720      	adds	r7, #32
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b09c      	sub	sp, #112	@ 0x70
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80052e6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052f0:	2b22      	cmp	r3, #34	@ 0x22
 80052f2:	f040 80b9 	bne.w	8005468 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80052fc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005300:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005304:	b2d9      	uxtb	r1, r3
 8005306:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800530a:	b2da      	uxtb	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005310:	400a      	ands	r2, r1
 8005312:	b2d2      	uxtb	r2, r2
 8005314:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800531a:	1c5a      	adds	r2, r3, #1
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005326:	b29b      	uxth	r3, r3
 8005328:	3b01      	subs	r3, #1
 800532a:	b29a      	uxth	r2, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005338:	b29b      	uxth	r3, r3
 800533a:	2b00      	cmp	r3, #0
 800533c:	f040 809c 	bne.w	8005478 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005346:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005348:	e853 3f00 	ldrex	r3, [r3]
 800534c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800534e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005350:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005354:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	461a      	mov	r2, r3
 800535c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800535e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005360:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005362:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005364:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005366:	e841 2300 	strex	r3, r2, [r1]
 800536a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800536c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1e6      	bne.n	8005340 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	3308      	adds	r3, #8
 8005378:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800537c:	e853 3f00 	ldrex	r3, [r3]
 8005380:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005382:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005384:	f023 0301 	bic.w	r3, r3, #1
 8005388:	667b      	str	r3, [r7, #100]	@ 0x64
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	3308      	adds	r3, #8
 8005390:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005392:	647a      	str	r2, [r7, #68]	@ 0x44
 8005394:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005396:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005398:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800539a:	e841 2300 	strex	r3, r2, [r1]
 800539e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80053a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d1e5      	bne.n	8005372 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2220      	movs	r2, #32
 80053aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d018      	beq.n	80053fa <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d0:	e853 3f00 	ldrex	r3, [r3]
 80053d4:	623b      	str	r3, [r7, #32]
   return(result);
 80053d6:	6a3b      	ldr	r3, [r7, #32]
 80053d8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80053dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	461a      	mov	r2, r3
 80053e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80053e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80053e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80053ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053ee:	e841 2300 	strex	r3, r2, [r1]
 80053f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80053f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d1e6      	bne.n	80053c8 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d12e      	bne.n	8005460 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	e853 3f00 	ldrex	r3, [r3]
 8005414:	60fb      	str	r3, [r7, #12]
   return(result);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f023 0310 	bic.w	r3, r3, #16
 800541c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	461a      	mov	r2, r3
 8005424:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005426:	61fb      	str	r3, [r7, #28]
 8005428:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800542a:	69b9      	ldr	r1, [r7, #24]
 800542c:	69fa      	ldr	r2, [r7, #28]
 800542e:	e841 2300 	strex	r3, r2, [r1]
 8005432:	617b      	str	r3, [r7, #20]
   return(result);
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d1e6      	bne.n	8005408 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	69db      	ldr	r3, [r3, #28]
 8005440:	f003 0310 	and.w	r3, r3, #16
 8005444:	2b10      	cmp	r3, #16
 8005446:	d103      	bne.n	8005450 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2210      	movs	r2, #16
 800544e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005456:	4619      	mov	r1, r3
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f7ff fad9 	bl	8004a10 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800545e:	e00b      	b.n	8005478 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f7fb fccd 	bl	8000e00 <HAL_UART_RxCpltCallback>
}
 8005466:	e007      	b.n	8005478 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	699a      	ldr	r2, [r3, #24]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f042 0208 	orr.w	r2, r2, #8
 8005476:	619a      	str	r2, [r3, #24]
}
 8005478:	bf00      	nop
 800547a:	3770      	adds	r7, #112	@ 0x70
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b09c      	sub	sp, #112	@ 0x70
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800548e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005498:	2b22      	cmp	r3, #34	@ 0x22
 800549a:	f040 80b9 	bne.w	8005610 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80054a4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054ac:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80054ae:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80054b2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80054b6:	4013      	ands	r3, r2
 80054b8:	b29a      	uxth	r2, r3
 80054ba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80054bc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054c2:	1c9a      	adds	r2, r3, #2
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	3b01      	subs	r3, #1
 80054d2:	b29a      	uxth	r2, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	f040 809c 	bne.w	8005620 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054f0:	e853 3f00 	ldrex	r3, [r3]
 80054f4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80054f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80054fc:	667b      	str	r3, [r7, #100]	@ 0x64
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	461a      	mov	r2, r3
 8005504:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005506:	657b      	str	r3, [r7, #84]	@ 0x54
 8005508:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800550a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800550c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800550e:	e841 2300 	strex	r3, r2, [r1]
 8005512:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005514:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005516:	2b00      	cmp	r3, #0
 8005518:	d1e6      	bne.n	80054e8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	3308      	adds	r3, #8
 8005520:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005522:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005524:	e853 3f00 	ldrex	r3, [r3]
 8005528:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800552a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800552c:	f023 0301 	bic.w	r3, r3, #1
 8005530:	663b      	str	r3, [r7, #96]	@ 0x60
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	3308      	adds	r3, #8
 8005538:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800553a:	643a      	str	r2, [r7, #64]	@ 0x40
 800553c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800553e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005540:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005542:	e841 2300 	strex	r3, r2, [r1]
 8005546:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800554a:	2b00      	cmp	r3, #0
 800554c:	d1e5      	bne.n	800551a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2220      	movs	r2, #32
 8005552:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800556c:	2b00      	cmp	r3, #0
 800556e:	d018      	beq.n	80055a2 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005576:	6a3b      	ldr	r3, [r7, #32]
 8005578:	e853 3f00 	ldrex	r3, [r3]
 800557c:	61fb      	str	r3, [r7, #28]
   return(result);
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005584:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	461a      	mov	r2, r3
 800558c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800558e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005590:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005592:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005594:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005596:	e841 2300 	strex	r3, r2, [r1]
 800559a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800559c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d1e6      	bne.n	8005570 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d12e      	bne.n	8005608 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	e853 3f00 	ldrex	r3, [r3]
 80055bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	f023 0310 	bic.w	r3, r3, #16
 80055c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	461a      	mov	r2, r3
 80055cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80055ce:	61bb      	str	r3, [r7, #24]
 80055d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d2:	6979      	ldr	r1, [r7, #20]
 80055d4:	69ba      	ldr	r2, [r7, #24]
 80055d6:	e841 2300 	strex	r3, r2, [r1]
 80055da:	613b      	str	r3, [r7, #16]
   return(result);
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d1e6      	bne.n	80055b0 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	69db      	ldr	r3, [r3, #28]
 80055e8:	f003 0310 	and.w	r3, r3, #16
 80055ec:	2b10      	cmp	r3, #16
 80055ee:	d103      	bne.n	80055f8 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2210      	movs	r2, #16
 80055f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80055fe:	4619      	mov	r1, r3
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f7ff fa05 	bl	8004a10 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005606:	e00b      	b.n	8005620 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f7fb fbf9 	bl	8000e00 <HAL_UART_RxCpltCallback>
}
 800560e:	e007      	b.n	8005620 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	699a      	ldr	r2, [r3, #24]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f042 0208 	orr.w	r2, r2, #8
 800561e:	619a      	str	r2, [r3, #24]
}
 8005620:	bf00      	nop
 8005622:	3770      	adds	r7, #112	@ 0x70
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005628:	b480      	push	{r7}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005630:	bf00      	nop
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <memset>:
 800563c:	4402      	add	r2, r0
 800563e:	4603      	mov	r3, r0
 8005640:	4293      	cmp	r3, r2
 8005642:	d100      	bne.n	8005646 <memset+0xa>
 8005644:	4770      	bx	lr
 8005646:	f803 1b01 	strb.w	r1, [r3], #1
 800564a:	e7f9      	b.n	8005640 <memset+0x4>

0800564c <__libc_init_array>:
 800564c:	b570      	push	{r4, r5, r6, lr}
 800564e:	4d0d      	ldr	r5, [pc, #52]	@ (8005684 <__libc_init_array+0x38>)
 8005650:	4c0d      	ldr	r4, [pc, #52]	@ (8005688 <__libc_init_array+0x3c>)
 8005652:	1b64      	subs	r4, r4, r5
 8005654:	10a4      	asrs	r4, r4, #2
 8005656:	2600      	movs	r6, #0
 8005658:	42a6      	cmp	r6, r4
 800565a:	d109      	bne.n	8005670 <__libc_init_array+0x24>
 800565c:	4d0b      	ldr	r5, [pc, #44]	@ (800568c <__libc_init_array+0x40>)
 800565e:	4c0c      	ldr	r4, [pc, #48]	@ (8005690 <__libc_init_array+0x44>)
 8005660:	f000 f818 	bl	8005694 <_init>
 8005664:	1b64      	subs	r4, r4, r5
 8005666:	10a4      	asrs	r4, r4, #2
 8005668:	2600      	movs	r6, #0
 800566a:	42a6      	cmp	r6, r4
 800566c:	d105      	bne.n	800567a <__libc_init_array+0x2e>
 800566e:	bd70      	pop	{r4, r5, r6, pc}
 8005670:	f855 3b04 	ldr.w	r3, [r5], #4
 8005674:	4798      	blx	r3
 8005676:	3601      	adds	r6, #1
 8005678:	e7ee      	b.n	8005658 <__libc_init_array+0xc>
 800567a:	f855 3b04 	ldr.w	r3, [r5], #4
 800567e:	4798      	blx	r3
 8005680:	3601      	adds	r6, #1
 8005682:	e7f2      	b.n	800566a <__libc_init_array+0x1e>
 8005684:	080056e4 	.word	0x080056e4
 8005688:	080056e4 	.word	0x080056e4
 800568c:	080056e4 	.word	0x080056e4
 8005690:	080056e8 	.word	0x080056e8

08005694 <_init>:
 8005694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005696:	bf00      	nop
 8005698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800569a:	bc08      	pop	{r3}
 800569c:	469e      	mov	lr, r3
 800569e:	4770      	bx	lr

080056a0 <_fini>:
 80056a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056a2:	bf00      	nop
 80056a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056a6:	bc08      	pop	{r3}
 80056a8:	469e      	mov	lr, r3
 80056aa:	4770      	bx	lr
